/root/projects/freebsd-include-mirror/aio.h:struct __aiocb_private {
/root/projects/freebsd-include-mirror/aio.h:typedef struct aiocb {
/root/projects/freebsd-include-mirror/aio.h:	struct	__aiocb_private	_aiocb_private;
/root/projects/freebsd-include-mirror/aio.h:	struct	sigevent aio_sigevent;	/* Signal to deliver */
/root/projects/freebsd-include-mirror/aio.h:struct timespec;
/root/projects/freebsd-include-mirror/aio.h:int	aio_read(struct aiocb *);
/root/projects/freebsd-include-mirror/aio.h:int	aio_write(struct aiocb *);
/root/projects/freebsd-include-mirror/aio.h:int	lio_listio(int, struct aiocb * const [], int, struct sigevent *);
/root/projects/freebsd-include-mirror/aio.h:int	aio_error(const struct aiocb *);
/root/projects/freebsd-include-mirror/aio.h:ssize_t	aio_return(struct aiocb *);
/root/projects/freebsd-include-mirror/aio.h:int	aio_cancel(int, struct aiocb *);
/root/projects/freebsd-include-mirror/aio.h:int	aio_suspend(const struct aiocb * const[], int, const struct timespec *);
/root/projects/freebsd-include-mirror/aio.h:int	aio_waitcomplete(struct aiocb **, struct timespec *);
/root/projects/freebsd-include-mirror/aio.h:int	aio_fsync(int op, struct aiocb *aiocbp);
/root/projects/freebsd-include-mirror/aio.h:struct socket;
/root/projects/freebsd-include-mirror/aio.h:struct sockbuf;
/root/projects/freebsd-include-mirror/aio.h:extern void (*aio_swake)(struct socket *, struct sockbuf *);
/root/projects/freebsd-include-mirror/alias.h: * The instance structure
/root/projects/freebsd-include-mirror/alias.h:struct libalias;
/root/projects/freebsd-include-mirror/alias.h: * An anonymous structure, a pointer to which is returned from
/root/projects/freebsd-include-mirror/alias.h:struct alias_link;
/root/projects/freebsd-include-mirror/alias.h:struct libalias *LibAliasInit(struct libalias *);
/root/projects/freebsd-include-mirror/alias.h:void		LibAliasSetAddress(struct libalias *, struct in_addr _addr);
/root/projects/freebsd-include-mirror/alias.h:void		LibAliasSetFWBase(struct libalias *, unsigned int _base, unsigned int _num);
/root/projects/freebsd-include-mirror/alias.h:void		LibAliasSetSkinnyPort(struct libalias *, unsigned int _port);
/root/projects/freebsd-include-mirror/alias.h:		LibAliasSetMode(struct libalias *, unsigned int _flags, unsigned int _mask);
/root/projects/freebsd-include-mirror/alias.h:void		LibAliasUninit(struct libalias *);
/root/projects/freebsd-include-mirror/alias.h:int		LibAliasIn (struct libalias *, char *_ptr, int _maxpacketsize);
/root/projects/freebsd-include-mirror/alias.h:int		LibAliasOut(struct libalias *, char *_ptr, int _maxpacketsize);
/root/projects/freebsd-include-mirror/alias.h:int		LibAliasOutTry(struct libalias *, char *_ptr, int _maxpacketsize, int _create);
/root/projects/freebsd-include-mirror/alias.h:int		LibAliasUnaliasOut(struct libalias *, char *_ptr, int _maxpacketsize);
/root/projects/freebsd-include-mirror/alias.h:LibAliasAddServer(struct libalias *, struct alias_link *_lnk,
/root/projects/freebsd-include-mirror/alias.h:    struct in_addr _addr, unsigned short _port);
/root/projects/freebsd-include-mirror/alias.h:struct alias_link *
/root/projects/freebsd-include-mirror/alias.h:LibAliasRedirectAddr(struct libalias *, struct in_addr _src_addr,
/root/projects/freebsd-include-mirror/alias.h:    struct in_addr _alias_addr);
/root/projects/freebsd-include-mirror/alias.h:int		LibAliasRedirectDynamic(struct libalias *, struct alias_link *_lnk);
/root/projects/freebsd-include-mirror/alias.h:void		LibAliasRedirectDelete(struct libalias *, struct alias_link *_lnk);
/root/projects/freebsd-include-mirror/alias.h:struct alias_link *
/root/projects/freebsd-include-mirror/alias.h:LibAliasRedirectPort(struct libalias *, struct in_addr _src_addr,
/root/projects/freebsd-include-mirror/alias.h:    unsigned short _src_port, struct in_addr _dst_addr,
/root/projects/freebsd-include-mirror/alias.h:    unsigned short _dst_port, struct in_addr _alias_addr,
/root/projects/freebsd-include-mirror/alias.h:struct alias_link *
/root/projects/freebsd-include-mirror/alias.h:LibAliasRedirectProto(struct libalias *, struct in_addr _src_addr,
/root/projects/freebsd-include-mirror/alias.h:    struct in_addr _dst_addr, struct in_addr _alias_addr,
/root/projects/freebsd-include-mirror/alias.h:void		LibAliasFragmentIn(struct libalias *, char *_ptr, char *_ptr_fragment);
/root/projects/freebsd-include-mirror/alias.h:char           *LibAliasGetFragment(struct libalias *, char *_ptr);
/root/projects/freebsd-include-mirror/alias.h:int		LibAliasSaveFragment(struct libalias *, char *_ptr);
/root/projects/freebsd-include-mirror/alias.h:int		LibAliasCheckNewLink(struct libalias *);
/root/projects/freebsd-include-mirror/alias.h:		LibAliasInternetChecksum(struct libalias *, unsigned short *_ptr, int _nbytes);
/root/projects/freebsd-include-mirror/alias.h:void		LibAliasSetTarget(struct libalias *, struct in_addr _target_addr);
/root/projects/freebsd-include-mirror/alias.h:int		LibAliasProxyRule(struct libalias *, const char *_cmd);
/root/projects/freebsd-include-mirror/alias.h:struct mbuf    *m_megapullup(struct mbuf *, int);
/root/projects/freebsd-include-mirror/archive_entry.h:/* These should match the types used in 'struct stat' */
/root/projects/freebsd-include-mirror/archive_entry.h: * You can think of this as "struct stat" with some text fields added in.
/root/projects/freebsd-include-mirror/archive_entry.h:struct archive_entry;
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL struct archive_entry	*archive_entry_clear(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL struct archive_entry	*archive_entry_clone(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void			 archive_entry_free(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL struct archive_entry	*archive_entry_new(void);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL time_t	 archive_entry_atime(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL long		 archive_entry_atime_nsec(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int		 archive_entry_atime_is_set(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL time_t	 archive_entry_birthtime(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL long		 archive_entry_birthtime_nsec(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int		 archive_entry_birthtime_is_set(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL time_t	 archive_entry_ctime(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL long		 archive_entry_ctime_nsec(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int		 archive_entry_ctime_is_set(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL dev_t		 archive_entry_dev(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL dev_t		 archive_entry_devmajor(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL dev_t		 archive_entry_devminor(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL __LA_MODE_T	 archive_entry_filetype(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void		 archive_entry_fflags(struct archive_entry *,
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const char	*archive_entry_fflags_text(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL __LA_GID_T	 archive_entry_gid(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const char	*archive_entry_gname(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const wchar_t	*archive_entry_gname_w(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const char	*archive_entry_hardlink(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const wchar_t	*archive_entry_hardlink_w(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL __LA_INO_T	 archive_entry_ino(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL __LA_INT64_T	 archive_entry_ino64(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL __LA_MODE_T	 archive_entry_mode(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL time_t	 archive_entry_mtime(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL long		 archive_entry_mtime_nsec(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int		 archive_entry_mtime_is_set(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL unsigned int	 archive_entry_nlink(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const char	*archive_entry_pathname(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const wchar_t	*archive_entry_pathname_w(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL dev_t		 archive_entry_rdev(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL dev_t		 archive_entry_rdevmajor(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL dev_t		 archive_entry_rdevminor(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const char	*archive_entry_sourcepath(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL __LA_INT64_T	 archive_entry_size(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int		 archive_entry_size_is_set(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const char	*archive_entry_strmode(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const char	*archive_entry_symlink(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const wchar_t	*archive_entry_symlink_w(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL __LA_UID_T	 archive_entry_uid(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const char	*archive_entry_uname(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const wchar_t	*archive_entry_uname_w(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_atime(struct archive_entry *, time_t, long);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void  archive_entry_unset_atime(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void archive_entry_copy_bhfi(struct archive_entry *,
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_birthtime(struct archive_entry *, time_t, long);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void  archive_entry_unset_birthtime(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_ctime(struct archive_entry *, time_t, long);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void  archive_entry_unset_ctime(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_dev(struct archive_entry *, dev_t);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_devmajor(struct archive_entry *, dev_t);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_devminor(struct archive_entry *, dev_t);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_filetype(struct archive_entry *, unsigned int);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_fflags(struct archive_entry *,
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const char *archive_entry_copy_fflags_text(struct archive_entry *,
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const wchar_t *archive_entry_copy_fflags_text_w(struct archive_entry *,
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_gid(struct archive_entry *, __LA_GID_T);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_gname(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_copy_gname(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_copy_gname_w(struct archive_entry *, const wchar_t *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int	archive_entry_update_gname_utf8(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_hardlink(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_copy_hardlink(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_copy_hardlink_w(struct archive_entry *, const wchar_t *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int	archive_entry_update_hardlink_utf8(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_ino(struct archive_entry *, __LA_INT64_T);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_ino(struct archive_entry *, unsigned long);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_ino64(struct archive_entry *, __LA_INT64_T);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_link(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_copy_link(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_copy_link_w(struct archive_entry *, const wchar_t *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int	archive_entry_update_link_utf8(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_mode(struct archive_entry *, __LA_MODE_T);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_mtime(struct archive_entry *, time_t, long);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void  archive_entry_unset_mtime(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_nlink(struct archive_entry *, unsigned int);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_pathname(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_copy_pathname(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_copy_pathname_w(struct archive_entry *, const wchar_t *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int	archive_entry_update_pathname_utf8(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_perm(struct archive_entry *, __LA_MODE_T);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_rdev(struct archive_entry *, dev_t);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_rdevmajor(struct archive_entry *, dev_t);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_rdevminor(struct archive_entry *, dev_t);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_size(struct archive_entry *, __LA_INT64_T);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_unset_size(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_copy_sourcepath(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_symlink(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_copy_symlink(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_copy_symlink_w(struct archive_entry *, const wchar_t *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int	archive_entry_update_symlink_utf8(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_uid(struct archive_entry *, __LA_UID_T);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_set_uname(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_copy_uname(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_copy_uname_w(struct archive_entry *, const wchar_t *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int	archive_entry_update_uname_utf8(struct archive_entry *, const char *);
/root/projects/freebsd-include-mirror/archive_entry.h: * Routines to bulk copy fields to/from a platform-native "struct
/root/projects/freebsd-include-mirror/archive_entry.h: * stat."  Libarchive used to just store a struct stat inside of each
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const struct stat	*archive_entry_stat(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	archive_entry_copy_stat(struct archive_entry *, const struct stat *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	 archive_entry_acl_clear(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	 archive_entry_acl_add_entry(struct archive_entry *,
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	 archive_entry_acl_add_entry_w(struct archive_entry *,
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int	 archive_entry_acl_reset(struct archive_entry *, int /* want_type */);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int	 archive_entry_acl_next(struct archive_entry *, int /* want_type */,
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int	 archive_entry_acl_next_w(struct archive_entry *, int /* want_type */,
/root/projects/freebsd-include-mirror/archive_entry.h: * Construct a text-format ACL.  The flags argument is a bitmask that
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL const wchar_t	*archive_entry_acl_text_w(struct archive_entry *,
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int	 archive_entry_acl_count(struct archive_entry *, int /* want_type */);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int		 __archive_entry_acl_parse_w(struct archive_entry *,
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	 archive_entry_xattr_clear(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void	 archive_entry_xattr_add_entry(struct archive_entry *,
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int	archive_entry_xattr_count(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int	archive_entry_xattr_reset(struct archive_entry *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL int	archive_entry_xattr_next(struct archive_entry *,
/root/projects/freebsd-include-mirror/archive_entry.h: * The 'struct archive_entry_linkresolver' is a cache of archive entries
/root/projects/freebsd-include-mirror/archive_entry.h:struct archive_entry_linkresolver;
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL struct archive_entry_linkresolver *archive_entry_linkresolver_new(void);
/root/projects/freebsd-include-mirror/archive_entry.h:	struct archive_entry_linkresolver *, int /* format_code */);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void archive_entry_linkresolver_free(struct archive_entry_linkresolver *);
/root/projects/freebsd-include-mirror/archive_entry.h:__LA_DECL void archive_entry_linkify(struct archive_entry_linkresolver *,
/root/projects/freebsd-include-mirror/archive_entry.h:    struct archive_entry **, struct archive_entry **);
/root/projects/freebsd-include-mirror/archive.h:/* These should match the types used in 'struct stat' */
/root/projects/freebsd-include-mirror/archive.h:struct archive;
/root/projects/freebsd-include-mirror/archive.h:struct archive_entry;
/root/projects/freebsd-include-mirror/archive.h:typedef __LA_SSIZE_T	archive_read_callback(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:typedef __LA_SSIZE_T	archive_skip_callback(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:typedef off_t		archive_skip_callback(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:typedef __LA_INT64_T	archive_skip_callback(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:typedef __LA_SSIZE_T	archive_write_callback(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:typedef int	archive_open_callback(struct archive *, void *_client_data);
/root/projects/freebsd-include-mirror/archive.h:typedef int	archive_close_callback(struct archive *, void *_client_data);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL struct archive	*archive_read_new(void);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_compression_all(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_compression_bzip2(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_compression_compress(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_compression_gzip(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_compression_lzma(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_compression_none(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_compression_program(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:				(struct archive *, const char *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_compression_rpm(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_compression_uu(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_compression_xz(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_format_all(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_format_ar(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_format_cpio(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_format_empty(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_format_gnutar(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_format_iso9660(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_format_mtree(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_format_raw(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_format_tar(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_format_xar(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_support_format_zip(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_open(struct archive *, void *_client_data,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_open2(struct archive *, void *_client_data,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_open_filename(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_open_file(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_open_memory(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		archive_read_open_memory2(struct archive *a, void *buff,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_open_fd(struct archive *, int _fd,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_open_FILE(struct archive *, FILE *_file);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_next_header(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:		     struct archive_entry **);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_next_header2(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:		     struct archive_entry *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL __LA_INT64_T		 archive_read_header_position(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL __LA_SSIZE_T		 archive_read_data(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_data_block(struct archive *a,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_data_block(struct archive *a,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_data_skip(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_data_into_buffer(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_data_into_fd(struct archive *, int fd);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		archive_read_set_format_options(struct archive *_a,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		archive_read_set_filter_options(struct archive *_a,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		archive_read_set_options(struct archive *_a,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int	 archive_read_extract(struct archive *, struct archive_entry *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int	 archive_read_extract2(struct archive *, struct archive_entry *,
/root/projects/freebsd-include-mirror/archive.h:		     struct archive * /* dest */);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL void	 archive_read_extract_set_progress_callback(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL void		archive_read_extract_set_skip_file(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_close(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_free(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_read_finish(struct archive *);
/root/projects/freebsd-include-mirror/archive.h: *      - construct an appropriate struct archive_entry structure
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL struct archive	*archive_write_new(void);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_bytes_per_block(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_get_bytes_per_block(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_bytes_in_last_block(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_get_bytes_in_last_block(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_skip_file(struct archive *, dev_t, ino_t);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_compression_bzip2(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_compression_compress(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_compression_gzip(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_compression_lzma(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_compression_none(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_compression_program(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_compression_xz(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_format(struct archive *, int format_code);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_format_by_name(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_format_ar_bsd(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_format_ar_svr4(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_format_cpio(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_format_cpio_newc(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_format_mtree(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:/* TODO: int archive_write_set_format_old_tar(struct archive *); */
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_format_pax(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_format_pax_restricted(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_format_shar(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_format_shar_dump(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_format_ustar(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_set_format_zip(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_open(struct archive *, void *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_open_fd(struct archive *, int _fd);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_open_filename(struct archive *, const char *_file);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_open_file(struct archive *, const char *_file);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_open_FILE(struct archive *, FILE *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_open_memory(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_header(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:		     struct archive_entry *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_data(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL __LA_SSIZE_T	 archive_write_data(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL __LA_SSIZE_T	 archive_write_data_block(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL __LA_SSIZE_T	 archive_write_data_block(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_finish_entry(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_close(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_free(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_finish(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		archive_write_set_format_options(struct archive *_a,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		archive_write_set_compressor_options(struct archive *_a,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		archive_write_set_options(struct archive *_a,
/root/projects/freebsd-include-mirror/archive.h: *      - construct an appropriate struct archive_entry structure
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL struct archive	*archive_write_disk_new(void);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_disk_set_skip_file(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_write_disk_set_options(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int	 archive_write_disk_set_standard_lookup(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int	 archive_write_disk_set_group_lookup(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int	 archive_write_disk_set_user_lookup(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL struct archive *archive_read_disk_new(void);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int archive_read_disk_set_symlink_logical(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int archive_read_disk_set_symlink_physical(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int archive_read_disk_set_symlink_hybrid(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int archive_read_disk_entry_from_file(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:    struct archive_entry *, int /* fd */, const struct stat *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL const char *archive_read_disk_gname(struct archive *, __LA_GID_T);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL const char *archive_read_disk_uname(struct archive *, __LA_UID_T);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int	archive_read_disk_set_standard_lookup(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int	archive_read_disk_set_gname_lookup(struct archive *,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int	archive_read_disk_set_uname_lookup(struct archive *,
/root/projects/freebsd-include-mirror/archive.h: * the struct archive object:
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL __LA_INT64_T	 archive_position_compressed(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL __LA_INT64_T	 archive_position_uncompressed(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL const char	*archive_compression_name(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_compression(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_errno(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL const char	*archive_error_string(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL const char	*archive_format_name(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_format(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL void		 archive_clear_error(struct archive *);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL void		 archive_set_error(struct archive *, int _err,
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL void		 archive_copy_error(struct archive *dest,
/root/projects/freebsd-include-mirror/archive.h:			    struct archive *src);
/root/projects/freebsd-include-mirror/archive.h:__LA_DECL int		 archive_file_count(struct archive *);
/root/projects/freebsd-include-mirror/ar.h:struct ar_hdr {
/root/projects/freebsd-include-mirror/asn1_err.h:struct et_list;
/root/projects/freebsd-include-mirror/asn1_err.h:void initialize_asn1_error_table_r(struct et_list **);
/root/projects/freebsd-include-mirror/Block_private.h:struct Block_descriptor {
/root/projects/freebsd-include-mirror/Block_private.h:struct Block_layout {
/root/projects/freebsd-include-mirror/Block_private.h:    struct Block_descriptor *descriptor;
/root/projects/freebsd-include-mirror/Block_private.h:struct Block_byref {
/root/projects/freebsd-include-mirror/Block_private.h:    struct Block_byref *forwarding;
/root/projects/freebsd-include-mirror/Block_private.h:    void (*byref_keep)(struct Block_byref *dst, struct Block_byref *src);
/root/projects/freebsd-include-mirror/Block_private.h:    void (*byref_destroy)(struct Block_byref *);
/root/projects/freebsd-include-mirror/Block_private.h:struct Block_byref_header {
/root/projects/freebsd-include-mirror/Block_private.h:    struct Block_byref *forwarding;
/root/projects/freebsd-include-mirror/Block_private.h:    BLOCK_FIELD_IS_BYREF    =  8,  /* the on stack structure holding the __block variable */
/root/projects/freebsd-include-mirror/Block_private.h:struct Block_basic {
/root/projects/freebsd-include-mirror/bluetooth.h:struct hostent *  bt_gethostbyname    (char const *name);
/root/projects/freebsd-include-mirror/bluetooth.h:struct hostent *  bt_gethostbyaddr    (char const *addr, int len, int type);
/root/projects/freebsd-include-mirror/bluetooth.h:struct hostent *  bt_gethostent       (void);
/root/projects/freebsd-include-mirror/bluetooth.h:struct protoent * bt_getprotobyname   (char const *name);
/root/projects/freebsd-include-mirror/bluetooth.h:struct protoent * bt_getprotobynumber (int proto);
/root/projects/freebsd-include-mirror/bluetooth.h:struct protoent * bt_getprotoent      (void);
/root/projects/freebsd-include-mirror/bluetooth.h:struct bt_devinfo
/root/projects/freebsd-include-mirror/bluetooth.h:struct bt_devreq
/root/projects/freebsd-include-mirror/bluetooth.h:struct bt_devfilter {
/root/projects/freebsd-include-mirror/bluetooth.h:struct bt_devinquiry {
/root/projects/freebsd-include-mirror/bluetooth.h:typedef int	(bt_devenum_cb_t)(int, struct bt_devinfo const *, void *);
/root/projects/freebsd-include-mirror/bluetooth.h:int		bt_devreq  (int s, struct bt_devreq *r, time_t to);
/root/projects/freebsd-include-mirror/bluetooth.h:int		bt_devfilter(int s, struct bt_devfilter const *newp,
/root/projects/freebsd-include-mirror/bluetooth.h:			     struct bt_devfilter *oldp);
/root/projects/freebsd-include-mirror/bluetooth.h:void		bt_devfilter_pkt_set(struct bt_devfilter *filter, uint8_t type);
/root/projects/freebsd-include-mirror/bluetooth.h:void		bt_devfilter_pkt_clr(struct bt_devfilter *filter, uint8_t type);
/root/projects/freebsd-include-mirror/bluetooth.h:int		bt_devfilter_pkt_tst(struct bt_devfilter const *filter, uint8_t type);
/root/projects/freebsd-include-mirror/bluetooth.h:void		bt_devfilter_evt_set(struct bt_devfilter *filter, uint8_t event);
/root/projects/freebsd-include-mirror/bluetooth.h:void		bt_devfilter_evt_clr(struct bt_devfilter *filter, uint8_t event);
/root/projects/freebsd-include-mirror/bluetooth.h:int		bt_devfilter_evt_tst(struct bt_devfilter const *filter, uint8_t event);
/root/projects/freebsd-include-mirror/bluetooth.h:			      struct bt_devinquiry **ii);
/root/projects/freebsd-include-mirror/bluetooth.h:int		bt_devinfo (struct bt_devinfo *di);
/root/projects/freebsd-include-mirror/bsdxml.h:struct XML_ParserStruct;
/root/projects/freebsd-include-mirror/bsdxml.h:typedef struct XML_ParserStruct *XML_Parser;
/root/projects/freebsd-include-mirror/bsdxml.h:typedef struct XML_cp XML_Content;
/root/projects/freebsd-include-mirror/bsdxml.h:struct XML_cp {
/root/projects/freebsd-include-mirror/bsdxml.h:typedef struct {
/root/projects/freebsd-include-mirror/bsdxml.h:/* Constructs a new parser; encoding is the encoding specified by the
/root/projects/freebsd-include-mirror/bsdxml.h:/* Constructs a new parser and namespace processor.  Element type
/root/projects/freebsd-include-mirror/bsdxml.h:/* Constructs a new parser using the memory management suite referred to
/root/projects/freebsd-include-mirror/bsdxml.h:typedef void (XMLCALL *XML_ProcessingInstructionHandler) (
/root/projects/freebsd-include-mirror/bsdxml.h:   construct which could be reported but for which no handler has been
/root/projects/freebsd-include-mirror/bsdxml.h:/* This structure is filled in by the XML_UnknownEncodingHandler to
/root/projects/freebsd-include-mirror/bsdxml.h:typedef struct {
/root/projects/freebsd-include-mirror/bsdxml.h:   fill in the XML_Encoding structure, and return XML_STATUS_OK.
/root/projects/freebsd-include-mirror/bsdxml.h:XML_SetProcessingInstructionHandler(XML_Parser parser,
/root/projects/freebsd-include-mirror/bsdxml.h:                                    XML_ProcessingInstructionHandler handler);
/root/projects/freebsd-include-mirror/bsdxml.h:   element, processing instruction or character data.  It causes the
/root/projects/freebsd-include-mirror/bsdxml.h:typedef struct {
/root/projects/freebsd-include-mirror/bsdxml.h:typedef struct {
/root/projects/freebsd-include-mirror/bsdxml.h:/* Return an XML_Expat_Version structure containing numeric version
/root/projects/freebsd-include-mirror/bsdxml.h:typedef struct {
/root/projects/freebsd-include-mirror/bzlib.h:   struct {
/root/projects/freebsd-include-mirror/calendar.h:struct date {
/root/projects/freebsd-include-mirror/calendar.h:struct date	*easterg(int _year, struct date *_dt);
/root/projects/freebsd-include-mirror/calendar.h:struct date	*easterog(int _year, struct date *_dt);
/root/projects/freebsd-include-mirror/calendar.h:struct date	*easteroj(int _year, struct date *_dt);
/root/projects/freebsd-include-mirror/calendar.h:struct date	*gdate(int _nd, struct date *_dt);
/root/projects/freebsd-include-mirror/calendar.h:struct date	*jdate(int _nd, struct date *_dt);
/root/projects/freebsd-include-mirror/calendar.h:int		 ndaysg(struct date *_dt);
/root/projects/freebsd-include-mirror/calendar.h:int		 ndaysj(struct date *_dt);
/root/projects/freebsd-include-mirror/camlib.h:struct cam_device {
/root/projects/freebsd-include-mirror/camlib.h:	struct scsi_inquiry_data inq_data;  /* SCSI Inquiry data */
/root/projects/freebsd-include-mirror/camlib.h:struct cam_device *	cam_open_device(const char *path, int flags);
/root/projects/freebsd-include-mirror/camlib.h:void			cam_close_device(struct cam_device *dev);
/root/projects/freebsd-include-mirror/camlib.h:void			cam_close_spec_device(struct cam_device *dev);
/root/projects/freebsd-include-mirror/camlib.h:struct cam_device *	cam_open_spec_device(const char *dev_name,
/root/projects/freebsd-include-mirror/camlib.h:					     struct cam_device *device);
/root/projects/freebsd-include-mirror/camlib.h:struct cam_device *	cam_open_btl(path_id_t path_id, target_id_t target_id,
/root/projects/freebsd-include-mirror/camlib.h:				     struct cam_device *device);
/root/projects/freebsd-include-mirror/camlib.h:struct cam_device *	cam_open_pass(const char *path, int flags,
/root/projects/freebsd-include-mirror/camlib.h:				      struct cam_device *device);
/root/projects/freebsd-include-mirror/camlib.h:union ccb *		cam_getccb(struct cam_device *dev);
/root/projects/freebsd-include-mirror/camlib.h:int			cam_send_ccb(struct cam_device *device, union ccb *ccb);
/root/projects/freebsd-include-mirror/camlib.h:char *			cam_path_string(struct cam_device *dev, char *str,
/root/projects/freebsd-include-mirror/camlib.h:struct cam_device *	cam_device_dup(struct cam_device *device);
/root/projects/freebsd-include-mirror/camlib.h:void			cam_device_copy(struct cam_device *src, 
/root/projects/freebsd-include-mirror/camlib.h:					struct cam_device *dst);
/root/projects/freebsd-include-mirror/camlib.h:int csio_decode(struct ccb_scsiio *csio, const char *fmt, ...)
/root/projects/freebsd-include-mirror/camlib.h:int csio_decode_visit(struct ccb_scsiio *csio, const char *fmt,
/root/projects/freebsd-include-mirror/camlib.h:int csio_build(struct ccb_scsiio *csio, u_int8_t *data_ptr,
/root/projects/freebsd-include-mirror/camlib.h:int csio_build_visit(struct ccb_scsiio *csio, u_int8_t *data_ptr,
/root/projects/freebsd-include-mirror/camlib.h:int csio_encode(struct ccb_scsiio *csio, const char *fmt, ...)
/root/projects/freebsd-include-mirror/camlib.h:int csio_encode_visit(struct ccb_scsiio *csio, const char *fmt,
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct heim_integer {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct heim_octet_string {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct heim_bmp_string {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct heim_universal_string {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct heim_oid {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct heim_bit_string {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct heim_octet_string heim_any;
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct heim_octet_string heim_any_set;
/root/projects/freebsd-include-mirror/cms_asn1.h:struct units;
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct DigestAlgorithmIdentifiers {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct ContentInfo {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct EncapsulatedContentInfo {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct CertificateSet {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct CertificateRevocationLists {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct IssuerAndSerialNumber {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct CMSIdentifier {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct CMSAttributes {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct SignerInfo {
/root/projects/freebsd-include-mirror/cms_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/cms_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct SignerInfos {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct SignedData {
/root/projects/freebsd-include-mirror/cms_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct OriginatorInfo {
/root/projects/freebsd-include-mirror/cms_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct KeyTransRecipientInfo {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct RecipientInfos {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct EncryptedContentInfo {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct UnprotectedAttributes {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct CMSEncryptedData {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct EnvelopedData {
/root/projects/freebsd-include-mirror/cms_asn1.h:typedef struct CMSRC2CBCParameter {
/root/projects/freebsd-include-mirror/com_err.h:void add_to_error_table (struct et_list *new_table);
/root/projects/freebsd-include-mirror/com_right.h:struct error_table {
/root/projects/freebsd-include-mirror/com_right.h:struct et_list {
/root/projects/freebsd-include-mirror/com_right.h:    struct et_list *next;
/root/projects/freebsd-include-mirror/com_right.h:    struct error_table *table;
/root/projects/freebsd-include-mirror/com_right.h:extern struct et_list *_et_list;
/root/projects/freebsd-include-mirror/com_right.h:const char *com_right (struct et_list *list, long code);
/root/projects/freebsd-include-mirror/com_right.h:void initialize_error_table_r (struct et_list **, const char **, int, long);
/root/projects/freebsd-include-mirror/com_right.h:void free_error_table (struct et_list *);
/root/projects/freebsd-include-mirror/curses.h: * Definition used to make WINDOW and similar structs opaque.
/root/projects/freebsd-include-mirror/curses.h:typedef struct screen  SCREEN;
/root/projects/freebsd-include-mirror/curses.h:typedef struct _win_st WINDOW;
/root/projects/freebsd-include-mirror/curses.h:typedef struct
/root/projects/freebsd-include-mirror/curses.h:struct ldat;
/root/projects/freebsd-include-mirror/curses.h:struct _win_st
/root/projects/freebsd-include-mirror/curses.h:	struct ldat *_line;	/* the actual line data */
/root/projects/freebsd-include-mirror/curses.h:	struct pdat
/root/projects/freebsd-include-mirror/curses.h:typedef struct
/root/projects/freebsd-include-mirror/curses.h:	struct
/root/projects/freebsd-include-mirror/curses.h:typedef struct
/root/projects/freebsd-include-mirror/curses.h:typedef struct
/root/projects/freebsd-include-mirror/db.h:/* Key/data structure -- a Data-Base Thang. */
/root/projects/freebsd-include-mirror/db.h:typedef struct {
/root/projects/freebsd-include-mirror/db.h:/* Access method description structure. */
/root/projects/freebsd-include-mirror/db.h:typedef struct __db {
/root/projects/freebsd-include-mirror/db.h:	int (*close)(struct __db *);
/root/projects/freebsd-include-mirror/db.h:	int (*del)(const struct __db *, const DBT *, unsigned int);
/root/projects/freebsd-include-mirror/db.h:	int (*get)(const struct __db *, const DBT *, DBT *, unsigned int);
/root/projects/freebsd-include-mirror/db.h:	int (*put)(const struct __db *, DBT *, const DBT *, unsigned int);
/root/projects/freebsd-include-mirror/db.h:	int (*seq)(const struct __db *, DBT *, DBT *, unsigned int);
/root/projects/freebsd-include-mirror/db.h:	int (*sync)(const struct __db *, unsigned int);
/root/projects/freebsd-include-mirror/db.h:	int (*fd)(const struct __db *);
/root/projects/freebsd-include-mirror/db.h:typedef struct {
/root/projects/freebsd-include-mirror/db.h:typedef struct {
/root/projects/freebsd-include-mirror/db.h:typedef struct {
/root/projects/freebsd-include-mirror/devinfo.h:struct devinfo_dev {
/root/projects/freebsd-include-mirror/devinfo.h:struct devinfo_rman {
/root/projects/freebsd-include-mirror/devinfo.h:struct devinfo_res {
/root/projects/freebsd-include-mirror/devinfo.h:extern struct devinfo_dev
/root/projects/freebsd-include-mirror/devinfo.h:extern struct devinfo_res
/root/projects/freebsd-include-mirror/devinfo.h:extern struct devinfo_rman
/root/projects/freebsd-include-mirror/devinfo.h:	devinfo_foreach_device_child(struct devinfo_dev *parent, 
/root/projects/freebsd-include-mirror/devinfo.h:	    int (* fn)(struct devinfo_dev *child, void *arg), 
/root/projects/freebsd-include-mirror/devinfo.h:	devinfo_foreach_device_resource(struct devinfo_dev *dev,
/root/projects/freebsd-include-mirror/devinfo.h:	    int (* fn)(struct devinfo_dev *dev, 
/root/projects/freebsd-include-mirror/devinfo.h:	    struct devinfo_res *res, void *arg),
/root/projects/freebsd-include-mirror/devinfo.h:	devinfo_foreach_rman_resource(struct devinfo_rman *rman,
/root/projects/freebsd-include-mirror/devinfo.h:	    int (* fn)(struct devinfo_res *res, void *arg),
/root/projects/freebsd-include-mirror/devinfo.h:	devinfo_foreach_rman(int (* fn)(struct devinfo_rman *rman, void *arg),
/root/projects/freebsd-include-mirror/devstat.h:struct devstat_match {
/root/projects/freebsd-include-mirror/devstat.h:struct devstat_match_table {
/root/projects/freebsd-include-mirror/devstat.h:struct device_selection {
/root/projects/freebsd-include-mirror/devstat.h:struct devinfo {
/root/projects/freebsd-include-mirror/devstat.h:	struct devstat	*devices;
/root/projects/freebsd-include-mirror/devstat.h:struct statinfo {
/root/projects/freebsd-include-mirror/devstat.h:	struct devinfo	*dinfo;
/root/projects/freebsd-include-mirror/devstat.h:int devstat_getdevs(kvm_t *kd, struct statinfo *stats);
/root/projects/freebsd-include-mirror/devstat.h:int devstat_selectdevs(struct device_selection **dev_select, int *num_selected,
/root/projects/freebsd-include-mirror/devstat.h:		       long current_generation, struct devstat *devices,
/root/projects/freebsd-include-mirror/devstat.h:		       int numdevs, struct devstat_match *matches,
/root/projects/freebsd-include-mirror/devstat.h:int devstat_buildmatch(char *match_str, struct devstat_match **matches,
/root/projects/freebsd-include-mirror/devstat.h:int devstat_compute_statistics(struct devstat *current,
/root/projects/freebsd-include-mirror/devstat.h:			       struct devstat *previous,
/root/projects/freebsd-include-mirror/devstat.h:long double devstat_compute_etime(struct bintime *cur_time,
/root/projects/freebsd-include-mirror/devstat.h:				  struct bintime *prev_time);
/root/projects/freebsd-include-mirror/dialog.h:struct _dlg_callback;
/root/projects/freebsd-include-mirror/dialog.h:typedef void (*DIALOG_FREEBACK) (struct _dlg_callback * /* p */);
/root/projects/freebsd-include-mirror/dialog.h:typedef struct _dlg_callback {
/root/projects/freebsd-include-mirror/dialog.h:    struct _dlg_callback *next;
/root/projects/freebsd-include-mirror/dialog.h:    bool (*handle_getc)(struct _dlg_callback *p, int ch, int fkey, int *result);
/root/projects/freebsd-include-mirror/dialog.h:    struct _dlg_callback **caller;
/root/projects/freebsd-include-mirror/dialog.h:    bool (*handle_input)(struct _dlg_callback *p);
/root/projects/freebsd-include-mirror/dialog.h:typedef struct _dlg_windows {
/root/projects/freebsd-include-mirror/dialog.h:    struct _dlg_windows *next;
/root/projects/freebsd-include-mirror/dialog.h:typedef struct {
/root/projects/freebsd-include-mirror/dialog.h:typedef struct {
/root/projects/freebsd-include-mirror/dialog.h:typedef struct {
/root/projects/freebsd-include-mirror/dialog.h:typedef struct {
/root/projects/freebsd-include-mirror/dialog.h:typedef struct {
/root/projects/freebsd-include-mirror/dialog.h:typedef struct mseRegion {
/root/projects/freebsd-include-mirror/dialog.h:    struct mseRegion *next;
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct heim_integer {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct heim_octet_string {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct heim_bmp_string {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct heim_universal_string {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct heim_oid {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct heim_bit_string {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct heim_octet_string heim_any;
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct heim_octet_string heim_any_set;
/root/projects/freebsd-include-mirror/digest_asn1.h:struct units;
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct DigestTypes {
/root/projects/freebsd-include-mirror/digest_asn1.h:const struct units * asn1_DigestTypes_units(void);
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct DigestInit {
/root/projects/freebsd-include-mirror/digest_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct DigestInitReply {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct DigestRequest {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct DigestError {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct DigestResponse {
/root/projects/freebsd-include-mirror/digest_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/digest_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct NTLMInit {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct NTLMInitReply {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct NTLMRequest {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct NTLMResponse {
/root/projects/freebsd-include-mirror/digest_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct DigestReqInner {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct DigestREQ {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct DigestRepInner {
/root/projects/freebsd-include-mirror/digest_asn1.h:typedef struct DigestREP {
/root/projects/freebsd-include-mirror/dirent.h:struct _telldir;		/* see telldir.h */
/root/projects/freebsd-include-mirror/dirent.h:struct pthread_mutex;
/root/projects/freebsd-include-mirror/dirent.h:/* structure describing an open directory. */
/root/projects/freebsd-include-mirror/dirent.h:typedef struct _dirdesc {
/root/projects/freebsd-include-mirror/dirent.h:	struct pthread_mutex	*dd_lock;	/* lock */
/root/projects/freebsd-include-mirror/dirent.h:	struct _telldir *dd_td;	/* telldir position recording */
/root/projects/freebsd-include-mirror/dirent.h:int	 alphasort(const struct dirent **, const struct dirent **);
/root/projects/freebsd-include-mirror/dirent.h:struct dirent *
/root/projects/freebsd-include-mirror/dirent.h:int	 readdir_r(DIR *, struct dirent *, struct dirent **);
/root/projects/freebsd-include-mirror/dirent.h:int	 scandir(const char *, struct dirent ***,
/root/projects/freebsd-include-mirror/dirent.h:	    int (*)(const struct dirent *), int (*)(const struct dirent **,
/root/projects/freebsd-include-mirror/dirent.h:	    const struct dirent **));
/root/projects/freebsd-include-mirror/dlfcn.h:typedef	struct dl_info {
/root/projects/freebsd-include-mirror/dlfcn.h:struct __dlfunc_arg {
/root/projects/freebsd-include-mirror/dlfcn.h:typedef	void (*dlfunc_t)(struct __dlfunc_arg);
/root/projects/freebsd-include-mirror/dlfcn.h:typedef struct dl_serpath {
/root/projects/freebsd-include-mirror/dlfcn.h:typedef struct  dl_serinfo {
/root/projects/freebsd-include-mirror/dlg_colors.h:typedef struct {
/root/projects/freebsd-include-mirror/dlg_keys.h:typedef struct {
/root/projects/freebsd-include-mirror/dwarf.h:#define DW_TAG_structure_type		0x13
/root/projects/freebsd-include-mirror/elf-hints.h:struct elfhints_hdr {
/root/projects/freebsd-include-mirror/errno.h:#define	EBADRPC		72		/* RPC struct is bad */
/root/projects/freebsd-include-mirror/fcntl.h: * They are also used (indirectly) in the kernel file structure f_flags,
/root/projects/freebsd-include-mirror/fcntl.h:struct flock {
/root/projects/freebsd-include-mirror/fcntl.h:struct oflock {
/root/projects/freebsd-include-mirror/fenv.h:typedef struct {
/root/projects/freebsd-include-mirror/fenv.h:	struct {
/root/projects/freebsd-include-mirror/fenv.h:	 * instruction clobbers the i387 register stack.  This happens because
/root/projects/freebsd-include-mirror/fetch.h:struct url {
/root/projects/freebsd-include-mirror/fetch.h:struct url_stat {
/root/projects/freebsd-include-mirror/fetch.h:struct url_ent {
/root/projects/freebsd-include-mirror/fetch.h:	struct url_stat	 stat;
/root/projects/freebsd-include-mirror/fetch.h:FILE		*fetchXGetFile(struct url *, struct url_stat *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:FILE		*fetchGetFile(struct url *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:FILE		*fetchPutFile(struct url *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:int		 fetchStatFile(struct url *, struct url_stat *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:struct url_ent	*fetchListFile(struct url *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:FILE		*fetchXGetHTTP(struct url *, struct url_stat *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:FILE		*fetchGetHTTP(struct url *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:FILE		*fetchPutHTTP(struct url *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:int		 fetchStatHTTP(struct url *, struct url_stat *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:struct url_ent	*fetchListHTTP(struct url *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:FILE		*fetchXGetFTP(struct url *, struct url_stat *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:FILE		*fetchGetFTP(struct url *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:FILE		*fetchPutFTP(struct url *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:int		 fetchStatFTP(struct url *, struct url_stat *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:struct url_ent	*fetchListFTP(struct url *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:FILE		*fetchXGetURL(const char *, struct url_stat *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:int		 fetchStatURL(const char *, struct url_stat *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:struct url_ent	*fetchListURL(const char *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:FILE		*fetchXGet(struct url *, struct url_stat *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:FILE		*fetchGet(struct url *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:FILE		*fetchPut(struct url *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:int		 fetchStat(struct url *, struct url_stat *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:struct url_ent	*fetchList(struct url *, const char *);
/root/projects/freebsd-include-mirror/fetch.h:struct url	*fetchMakeURL(const char *, const char *, int,
/root/projects/freebsd-include-mirror/fetch.h:struct url	*fetchParseURL(const char *);
/root/projects/freebsd-include-mirror/fetch.h:void		 fetchFreeURL(struct url *);
/root/projects/freebsd-include-mirror/fetch.h:typedef int (*auth_t)(struct url *);
/root/projects/freebsd-include-mirror/FlexLexer.h:struct yy_buffer_state;
/root/projects/freebsd-include-mirror/FlexLexer.h:		yy_switch_to_buffer( struct yy_buffer_state* new_buffer ) = 0;
/root/projects/freebsd-include-mirror/FlexLexer.h:	virtual struct yy_buffer_state*
/root/projects/freebsd-include-mirror/FlexLexer.h:	virtual void yy_delete_buffer( struct yy_buffer_state* b ) = 0;
/root/projects/freebsd-include-mirror/FlexLexer.h:	void yy_switch_to_buffer( struct yy_buffer_state* new_buffer );
/root/projects/freebsd-include-mirror/FlexLexer.h:	struct yy_buffer_state* yy_create_buffer( std::istream* s, int size );
/root/projects/freebsd-include-mirror/FlexLexer.h:	void yy_delete_buffer( struct yy_buffer_state* b );
/root/projects/freebsd-include-mirror/FlexLexer.h:	void yy_init_buffer( struct yy_buffer_state* b, std::istream* s );
/root/projects/freebsd-include-mirror/FlexLexer.h:	void yy_flush_buffer( struct yy_buffer_state* b );
/root/projects/freebsd-include-mirror/FlexLexer.h:	struct yy_buffer_state* yy_current_buffer;
/root/projects/freebsd-include-mirror/form.h:typedef struct {
/root/projects/freebsd-include-mirror/form.h:typedef struct fieldnode {
/root/projects/freebsd-include-mirror/form.h:  struct fieldnode *	snext;		/* sorted order pointer		*/
/root/projects/freebsd-include-mirror/form.h:  struct fieldnode *	sprev;		/* sorted order pointer		*/
/root/projects/freebsd-include-mirror/form.h:  struct fieldnode *	link;		/* linked field chain		*/
/root/projects/freebsd-include-mirror/form.h:  struct formnode *	form;		/* containing form		*/
/root/projects/freebsd-include-mirror/form.h:  struct typenode *	type;		/* field type			*/
/root/projects/freebsd-include-mirror/form.h:   * directly, we cannot make the struct opaque.  Offsets of members up to
/root/projects/freebsd-include-mirror/form.h:typedef struct typenode {
/root/projects/freebsd-include-mirror/form.h:  struct typenode *	left;			/* ptr to operand for | */
/root/projects/freebsd-include-mirror/form.h:  struct typenode *	right;			/* ptr to operand for | */
/root/projects/freebsd-include-mirror/form.h:typedef struct formnode {
/root/projects/freebsd-include-mirror/form.h:  void			(*forminit)(struct formnode *);
/root/projects/freebsd-include-mirror/form.h:  void			(*formterm)(struct formnode *);
/root/projects/freebsd-include-mirror/form.h:  void			(*fieldinit)(struct formnode *);
/root/projects/freebsd-include-mirror/form.h:  void			(*fieldterm)(struct formnode *);
/root/projects/freebsd-include-mirror/fstab.h:struct fstab {
/root/projects/freebsd-include-mirror/fstab.h:struct fstab *getfsent(void);
/root/projects/freebsd-include-mirror/fstab.h:struct fstab *getfsspec(const char *);
/root/projects/freebsd-include-mirror/fstab.h:struct fstab *getfsfile(const char *);
/root/projects/freebsd-include-mirror/ftpio.h:/* Internal housekeeping data structure for FTP sessions */
/root/projects/freebsd-include-mirror/ftpio.h:typedef struct {
/root/projects/freebsd-include-mirror/ftpio.h:struct ftperr {
/root/projects/freebsd-include-mirror/ftpio.h:extern struct	ftperr ftpErrList[];
/root/projects/freebsd-include-mirror/fts.h:typedef struct {
/root/projects/freebsd-include-mirror/fts.h:	struct _ftsent *fts_cur;	/* current node */
/root/projects/freebsd-include-mirror/fts.h:	struct _ftsent *fts_child;	/* linked list of children */
/root/projects/freebsd-include-mirror/fts.h:	struct _ftsent **fts_array;	/* sort array */
/root/projects/freebsd-include-mirror/fts.h:	    (const struct _ftsent * const *, const struct _ftsent * const *);
/root/projects/freebsd-include-mirror/fts.h:typedef struct _ftsent {
/root/projects/freebsd-include-mirror/fts.h:	struct _ftsent *fts_cycle;	/* cycle node */
/root/projects/freebsd-include-mirror/fts.h:	struct _ftsent *fts_parent;	/* parent directory */
/root/projects/freebsd-include-mirror/fts.h:	struct _ftsent *fts_link;	/* next file in directory */
/root/projects/freebsd-include-mirror/fts.h:	int fts_info;			/* user status for FTSENT structure */
/root/projects/freebsd-include-mirror/fts.h:	unsigned fts_flags;		/* private flags for FTSENT structure */
/root/projects/freebsd-include-mirror/fts.h:#define	FTS_NOINSTR	 3		/* no instructions */
/root/projects/freebsd-include-mirror/fts.h:	int fts_instr;			/* fts_set() instructions */
/root/projects/freebsd-include-mirror/fts.h:	struct stat *fts_statp;		/* stat(2) information */
/root/projects/freebsd-include-mirror/ftw.h:struct FTW {
/root/projects/freebsd-include-mirror/ftw.h:int	ftw(const char *, int (*)(const char *, const struct stat *, int), int);
/root/projects/freebsd-include-mirror/ftw.h:int	nftw(const char *, int (*)(const char *, const struct stat *, int,
/root/projects/freebsd-include-mirror/ftw.h:	    struct FTW *), int, int);
/root/projects/freebsd-include-mirror/getopt.h:struct option {
/root/projects/freebsd-include-mirror/getopt.h:	const struct option *, int *);
/root/projects/freebsd-include-mirror/getopt.h:	const struct option *, int *);
/root/projects/freebsd-include-mirror/glob.h:struct stat;
/root/projects/freebsd-include-mirror/glob.h:typedef struct {
/root/projects/freebsd-include-mirror/glob.h:	struct dirent *(*gl_readdir)(void *);
/root/projects/freebsd-include-mirror/glob.h:	int (*gl_lstat)(const char *, struct stat *);
/root/projects/freebsd-include-mirror/glob.h:	int (*gl_stat)(const char *, struct stat *);
/root/projects/freebsd-include-mirror/grp.h:struct group {
/root/projects/freebsd-include-mirror/grp.h:struct group	*getgrent(void);
/root/projects/freebsd-include-mirror/grp.h:struct group	*getgrgid(gid_t);
/root/projects/freebsd-include-mirror/grp.h:struct group	*getgrnam(const char *);
/root/projects/freebsd-include-mirror/grp.h:int		 getgrgid_r(gid_t, struct group *, char *, size_t,
/root/projects/freebsd-include-mirror/grp.h:		    struct group **);
/root/projects/freebsd-include-mirror/grp.h:int		 getgrnam_r(const char *, struct group *, char *, size_t,
/root/projects/freebsd-include-mirror/grp.h:		    struct group **);
/root/projects/freebsd-include-mirror/grp.h:int		 getgrent_r(struct group *, char *, size_t, struct group **);
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct heim_integer {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct heim_octet_string {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct heim_bmp_string {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct heim_universal_string {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct heim_oid {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct heim_bit_string {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct heim_octet_string heim_any;
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct heim_octet_string heim_any_set;
/root/projects/freebsd-include-mirror/hdb_asn1.h:struct units;
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct Salt {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct Key {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct Event {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct HDBFlags {
/root/projects/freebsd-include-mirror/hdb_asn1.h:const struct units * asn1_HDBFlags_units(void);
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct GENERATION {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct HDB_Ext_PKINIT_acl {
/root/projects/freebsd-include-mirror/hdb_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct HDB_Ext_PKINIT_hash {
/root/projects/freebsd-include-mirror/hdb_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct HDB_Ext_Constrained_delegation_acl {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct HDB_Ext_Password {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct HDB_Ext_Aliases {
/root/projects/freebsd-include-mirror/hdb_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct HDB_extension {
/root/projects/freebsd-include-mirror/hdb_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct HDB_extensions {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct hdb_entry {
/root/projects/freebsd-include-mirror/hdb_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/hdb_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/hdb_asn1.h:typedef struct hdb_entry_alias {
/root/projects/freebsd-include-mirror/hdb_err.h:struct et_list;
/root/projects/freebsd-include-mirror/hdb_err.h:void initialize_hdb_error_table_r(struct et_list **);
/root/projects/freebsd-include-mirror/hdb.h:struct hdb_dbinfo;
/root/projects/freebsd-include-mirror/hdb.h:typedef struct hdb_master_key_data *hdb_master_key;
/root/projects/freebsd-include-mirror/hdb.h:typedef struct hdb_entry_ex {
/root/projects/freebsd-include-mirror/hdb.h:    void (*free_entry)(krb5_context, struct hdb_entry_ex *);
/root/projects/freebsd-include-mirror/hdb.h:typedef struct HDB{
/root/projects/freebsd-include-mirror/hdb.h:				struct HDB*,
/root/projects/freebsd-include-mirror/hdb.h:				 struct HDB*);
/root/projects/freebsd-include-mirror/hdb.h:				struct HDB*,
/root/projects/freebsd-include-mirror/hdb.h:				 struct HDB*,
/root/projects/freebsd-include-mirror/hdb.h:				 struct HDB*,
/root/projects/freebsd-include-mirror/hdb.h:				  struct HDB*,
/root/projects/freebsd-include-mirror/hdb.h:				    struct HDB*,
/root/projects/freebsd-include-mirror/hdb.h:				   struct HDB*,
/root/projects/freebsd-include-mirror/hdb.h:				struct HDB*,
/root/projects/freebsd-include-mirror/hdb.h:				  struct HDB*);
/root/projects/freebsd-include-mirror/hdb.h:				  struct HDB*,
/root/projects/freebsd-include-mirror/hdb.h:				struct HDB*,
/root/projects/freebsd-include-mirror/hdb.h:				struct HDB*,
/root/projects/freebsd-include-mirror/hdb.h:				struct HDB*,
/root/projects/freebsd-include-mirror/hdb.h:				   struct HDB*);
/root/projects/freebsd-include-mirror/hdb.h:struct hdb_so_method {
/root/projects/freebsd-include-mirror/hdb-protos.h:	struct hdb_dbinfo */*dbp*/);
/root/projects/freebsd-include-mirror/hdb-protos.h:	struct hdb_dbinfo */*dbp*/);
/root/projects/freebsd-include-mirror/hdb-protos.h:	struct hdb_dbinfo */*dbp*/);
/root/projects/freebsd-include-mirror/hdb-protos.h:	struct hdb_dbinfo */*dbp*/);
/root/projects/freebsd-include-mirror/hdb-protos.h:	struct hdb_dbinfo */*dbp*/);
/root/projects/freebsd-include-mirror/hdb-protos.h:	struct hdb_dbinfo */*dbp*/);
/root/projects/freebsd-include-mirror/hdb-protos.h:struct hdb_dbinfo *
/root/projects/freebsd-include-mirror/hdb-protos.h:	struct hdb_dbinfo */*dbp*/,
/root/projects/freebsd-include-mirror/hdb-protos.h:	struct hdb_dbinfo */*dbprevp*/);
/root/projects/freebsd-include-mirror/hdb-protos.h:	struct hdb_dbinfo */*dbp*/);
/root/projects/freebsd-include-mirror/hdb-protos.h:	struct hdb_dbinfo **/*dbp*/);
/root/projects/freebsd-include-mirror/hdb-protos.h:	struct hdb_dbinfo **/*dbp*/);
/root/projects/freebsd-include-mirror/heim_err.h:struct et_list;
/root/projects/freebsd-include-mirror/heim_err.h:void initialize_heim_error_table_r(struct et_list **);
/root/projects/freebsd-include-mirror/heimntlm.h:struct ntlm_buf {
/root/projects/freebsd-include-mirror/heimntlm.h:struct ntlm_targetinfo {
/root/projects/freebsd-include-mirror/heimntlm.h:struct ntlm_type1 {
/root/projects/freebsd-include-mirror/heimntlm.h:struct ntlm_type2 {
/root/projects/freebsd-include-mirror/heimntlm.h:    struct ntlm_buf targetinfo; /**< */
/root/projects/freebsd-include-mirror/heimntlm.h:struct ntlm_type3 {
/root/projects/freebsd-include-mirror/heimntlm.h:    struct ntlm_buf lm; /**< */
/root/projects/freebsd-include-mirror/heimntlm.h:    struct ntlm_buf ntlm; /**< */
/root/projects/freebsd-include-mirror/heimntlm.h:    struct ntlm_buf sessionkey; /**< */
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_buf */*session*/,
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_buf */*master*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_buf */*answer*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	const struct ntlm_buf */*infotarget*/,
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_buf */*answer*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_buf */*lm*/,
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_buf */*ntlm*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	const struct ntlm_buf */*data*/,
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_targetinfo */*ti*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	const struct ntlm_buf */*buf*/,
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_type1 */*data*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	const struct ntlm_buf */*buf*/,
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_type2 */*type2*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	const struct ntlm_buf */*buf*/,
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_type3 */*type3*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	const struct ntlm_targetinfo */*ti*/,
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_buf */*data*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	const struct ntlm_type1 */*type1*/,
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_buf */*data*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	const struct ntlm_type2 */*type2*/,
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_buf */*data*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	const struct ntlm_type3 */*type3*/,
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_buf */*data*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:heim_ntlm_free_buf (struct ntlm_buf */*p*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:heim_ntlm_free_targetinfo (struct ntlm_targetinfo */*ti*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:heim_ntlm_free_type1 (struct ntlm_type1 */*data*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:heim_ntlm_free_type2 (struct ntlm_type2 */*data*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:heim_ntlm_free_type3 (struct ntlm_type3 */*data*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_buf */*key*/);
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	const struct ntlm_buf */*answer*/,
/root/projects/freebsd-include-mirror/heimntlm-protos.h:	struct ntlm_buf */*infotarget*/,
/root/projects/freebsd-include-mirror/heim_threads.h:typedef struct heim_thread_key {
/root/projects/freebsd-include-mirror/heim_threads.h:    void (*destructor)(void *);
/root/projects/freebsd-include-mirror/heim_threads.h:	do { (k)->value = NULL; (k)->destructor = (d); r = 0; } while(0)
/root/projects/freebsd-include-mirror/heim_threads.h:#define HEIMDAL_key_delete(k) do { (*(k).destructor)((k).value); } while(0)
/root/projects/freebsd-include-mirror/histedit.h:typedef struct editline EditLine;
/root/projects/freebsd-include-mirror/histedit.h:typedef struct lineinfo {
/root/projects/freebsd-include-mirror/histedit.h:typedef struct history History;
/root/projects/freebsd-include-mirror/histedit.h:typedef struct HistEvent {
/root/projects/freebsd-include-mirror/histedit.h:typedef struct tokenizer Tokenizer;
/root/projects/freebsd-include-mirror/hx509_err.h:struct et_list;
/root/projects/freebsd-include-mirror/hx509_err.h:void initialize_hx_error_table_r(struct et_list **);
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_cert_attribute_data *hx509_cert_attribute;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_cert_data *hx509_cert;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_certs_data *hx509_certs;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_context_data *hx509_context;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_crypto_data *hx509_crypto;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_lock_data *hx509_lock;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_name_data *hx509_name;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_private_key *hx509_private_key;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_validate_ctx_data *hx509_validate_ctx;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_verify_ctx_data *hx509_verify_ctx;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_revoke_ctx_data *hx509_revoke_ctx;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_query_data hx509_query;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_request_data *hx509_request;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_error_data *hx509_error;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_peer_info *hx509_peer_info;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_ca_tbs *hx509_ca_tbs;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_env *hx509_env;
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_crl *hx509_crl;
/root/projects/freebsd-include-mirror/hx509.h:struct hx509_cert_attribute_data {
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_prompt {
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_octet_string_list {
/root/projects/freebsd-include-mirror/hx509.h:typedef struct hx509_pem_header {
/root/projects/freebsd-include-mirror/hx509.h:    struct hx509_pem_header *next;
/root/projects/freebsd-include-mirror/hx509-private.h:	struct hx509_collector **/*collector*/);
/root/projects/freebsd-include-mirror/hx509-private.h:	struct hx509_collector */*c*/,
/root/projects/freebsd-include-mirror/hx509-private.h:	struct hx509_collector */*c*/,
/root/projects/freebsd-include-mirror/hx509-private.h:	struct hx509_collector */*c*/,
/root/projects/freebsd-include-mirror/hx509-private.h:_hx509_collector_free (struct hx509_collector */*c*/);
/root/projects/freebsd-include-mirror/hx509-private.h:_hx509_collector_get_lock (struct hx509_collector */*c*/);
/root/projects/freebsd-include-mirror/hx509-private.h:	struct hx509_collector */*c*/,
/root/projects/freebsd-include-mirror/hx509-private.h:	struct hx509_generate_private_context */*ctx*/,
/root/projects/freebsd-include-mirror/hx509-private.h:	struct hx509_generate_private_context */*ctx*/,
/root/projects/freebsd-include-mirror/hx509-private.h:_hx509_generate_private_key_free (struct hx509_generate_private_context **/*ctx*/);
/root/projects/freebsd-include-mirror/hx509-private.h:	struct hx509_generate_private_context **/*ctx*/);
/root/projects/freebsd-include-mirror/hx509-private.h:	struct hx509_generate_private_context */*ctx*/);
/root/projects/freebsd-include-mirror/hx509-private.h:	struct hx509_keyset_ops */*ops*/);
/root/projects/freebsd-include-mirror/hx509-private.h:const struct _hx509_password *
/root/projects/freebsd-include-mirror/hx509-private.h:	struct stat */*rsb*/);
/root/projects/freebsd-include-mirror/hx509-private.h:	struct stat */*rsb*/);
/root/projects/freebsd-include-mirror/hx509-protos.h:const struct units *
/root/projects/freebsd-include-mirror/hx509-protos.h:	const struct sockaddr */*sa*/,
/root/projects/freebsd-include-mirror/ifaddrs.h:struct ifaddrs {
/root/projects/freebsd-include-mirror/ifaddrs.h:	struct ifaddrs  *ifa_next;
/root/projects/freebsd-include-mirror/ifaddrs.h:	struct sockaddr	*ifa_addr;
/root/projects/freebsd-include-mirror/ifaddrs.h:	struct sockaddr	*ifa_netmask;
/root/projects/freebsd-include-mirror/ifaddrs.h:	struct sockaddr	*ifa_dstaddr;
/root/projects/freebsd-include-mirror/ifaddrs.h:struct ifmaddrs {
/root/projects/freebsd-include-mirror/ifaddrs.h:	struct ifmaddrs	*ifma_next;
/root/projects/freebsd-include-mirror/ifaddrs.h:	struct sockaddr	*ifma_name;
/root/projects/freebsd-include-mirror/ifaddrs.h:	struct sockaddr	*ifma_addr;
/root/projects/freebsd-include-mirror/ifaddrs.h:	struct sockaddr	*ifma_lladdr;
/root/projects/freebsd-include-mirror/ifaddrs.h:extern int getifaddrs(struct ifaddrs **);
/root/projects/freebsd-include-mirror/ifaddrs.h:extern void freeifaddrs(struct ifaddrs *);
/root/projects/freebsd-include-mirror/ifaddrs.h:extern int getifmaddrs(struct ifmaddrs **);
/root/projects/freebsd-include-mirror/ifaddrs.h:extern void freeifmaddrs(struct ifmaddrs *);
/root/projects/freebsd-include-mirror/inttypes.h:typedef struct {
/root/projects/freebsd-include-mirror/jail.h:struct jailparam {
/root/projects/freebsd-include-mirror/jail.h:	int		 jp_structtype;
/root/projects/freebsd-include-mirror/jail.h:extern int jailparam_all(struct jailparam **jpp);
/root/projects/freebsd-include-mirror/jail.h:extern int jailparam_init(struct jailparam *jp, const char *name);
/root/projects/freebsd-include-mirror/jail.h:extern int jailparam_import(struct jailparam *jp, const char *value);
/root/projects/freebsd-include-mirror/jail.h:extern int jailparam_import_raw(struct jailparam *jp, void *value,
/root/projects/freebsd-include-mirror/jail.h:extern int jailparam_set(struct jailparam *jp, unsigned njp, int flags);
/root/projects/freebsd-include-mirror/jail.h:extern int jailparam_get(struct jailparam *jp, unsigned njp, int flags);
/root/projects/freebsd-include-mirror/jail.h:extern char *jailparam_export(struct jailparam *jp);
/root/projects/freebsd-include-mirror/jail.h:extern void jailparam_free(struct jailparam *jp, unsigned njp);
/root/projects/freebsd-include-mirror/k524_err.h:struct et_list;
/root/projects/freebsd-include-mirror/k524_err.h:void initialize_k524_error_table_r(struct et_list **);
/root/projects/freebsd-include-mirror/kafs.h:#define _VICEIOCTL(id)  ((unsigned int ) _IOW('V', id, struct ViceIoctl))
/root/projects/freebsd-include-mirror/kafs.h:#define _AFSCIOCTL(id)  ((unsigned int ) _IOW('C', id, struct ViceIoctl))
/root/projects/freebsd-include-mirror/kafs.h:struct ViceIoctl {
/root/projects/freebsd-include-mirror/kafs.h:struct ClearToken {
/root/projects/freebsd-include-mirror/kafs.h:		  struct ViceIoctl *a_paramsP,
/root/projects/freebsd-include-mirror/kafs.h:int kafs_settoken_rxkad (const char *, struct ClearToken *,
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct heim_integer {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct heim_octet_string {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct heim_bmp_string {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct heim_universal_string {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct heim_oid {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct heim_bit_string {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct heim_octet_string heim_any;
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct heim_octet_string heim_any_set;
/root/projects/freebsd-include-mirror/krb5_asn1.h:struct units;
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct PrincipalName {
/root/projects/freebsd-include-mirror/krb5_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct Principal {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct HostAddress {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct HostAddresses {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct AuthorizationDataElement {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct AuthorizationData {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct APOptions {
/root/projects/freebsd-include-mirror/krb5_asn1.h:const struct units * asn1_APOptions_units(void);
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct TicketFlags {
/root/projects/freebsd-include-mirror/krb5_asn1.h:const struct units * asn1_TicketFlags_units(void);
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct KDCOptions {
/root/projects/freebsd-include-mirror/krb5_asn1.h:const struct units * asn1_KDCOptions_units(void);
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct LastReq {
/root/projects/freebsd-include-mirror/krb5_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct EncryptedData {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct EncryptionKey {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct TransitedEncoding {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct Ticket {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct EncTicketPart {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct Checksum {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct Authenticator {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct PA_DATA {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct ETYPE_INFO_ENTRY {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct ETYPE_INFO {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct ETYPE_INFO2_ENTRY {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct ETYPE_INFO2 {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct METHOD_DATA {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct TypedData {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct TYPED_DATA {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct KDC_REQ_BODY {
/root/projects/freebsd-include-mirror/krb5_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/krb5_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct KDC_REQ {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct PA_ENC_TS_ENC {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct PA_PAC_REQUEST {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct KDC_REP {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct EncKDCRepPart {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct AP_REQ {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct AP_REP {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct EncAPRepPart {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct KRB_SAFE_BODY {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct KRB_SAFE {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct KRB_PRIV {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct EncKrbPrivPart {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct KRB_CRED {
/root/projects/freebsd-include-mirror/krb5_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct KrbCredInfo {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct EncKrbCredPart {
/root/projects/freebsd-include-mirror/krb5_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct KRB_ERROR {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct ChangePasswdDataMS {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct EtypeList {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct AD_KDCIssued {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct AD_AND_OR {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct SAMFlags {
/root/projects/freebsd-include-mirror/krb5_asn1.h:const struct units * asn1_SAMFlags_units(void);
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct PA_SAM_CHALLENGE_2_BODY {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct PA_SAM_CHALLENGE_2 {
/root/projects/freebsd-include-mirror/krb5_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct PA_SAM_RESPONSE_2 {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct PA_ENC_SAM_RESPONSE_ENC {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct PA_S4U2Self {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct KRB5SignedPathPrincipals {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct KRB5SignedPathData {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct KRB5SignedPath {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct PA_ClientCanonicalizedNames {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct PA_ClientCanonicalized {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct AD_LoginAlias {
/root/projects/freebsd-include-mirror/krb5_asn1.h:typedef struct PA_SvrReferralData {
/root/projects/freebsd-include-mirror/krb5_err.h:struct et_list;
/root/projects/freebsd-include-mirror/krb5_err.h:void initialize_krb5_error_table_r(struct et_list **);
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_crypto_data;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_crypto_data *krb5_crypto;
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_get_creds_opt_data;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_get_creds_opt_data *krb5_get_creds_opt;
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_digest_data;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_digest_data *krb5_digest;
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_ntlm_data;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_ntlm_data *krb5_ntlm;
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_pac_data;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_pac_data *krb5_pac;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_rd_req_in_ctx_data *krb5_rd_req_in_ctx;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_rd_req_out_ctx_data *krb5_rd_req_out_ctx;
/root/projects/freebsd-include-mirror/krb5.h:struct ContentInfo;
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_pk_identity;
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_pk_cert;
/root/projects/freebsd-include-mirror/krb5.h:/* krb5_enc_data is a mit compat structure */
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_enc_data {
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_salt {
/root/projects/freebsd-include-mirror/krb5.h:typedef struct {
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_preauthdata {
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_cc_ops;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_ccache_data {
/root/projects/freebsd-include-mirror/krb5.h:    const struct krb5_cc_ops *ops;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_ccache_data *krb5_ccache;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_context_data *krb5_context;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct Principal *krb5_principal;
/root/projects/freebsd-include-mirror/krb5.h:typedef const struct Principal *krb5_const_principal;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_times {
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_creds {
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_cc_cache_cursor_data *krb5_cc_cache_cursor;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_cc_ops {
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_log_facility;
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_config_binding {
/root/projects/freebsd-include-mirror/krb5.h:    struct krb5_config_binding *next;
/root/projects/freebsd-include-mirror/krb5.h:	struct krb5_config_binding *list;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_config_binding krb5_config_binding;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_ticket {
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_rcache_data;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_rcache_data *krb5_rcache;
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_storage_data;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_storage_data krb5_storage;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_keytab_entry {
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_kt_cursor {
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_keytab_data;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_keytab_data *krb5_keytab;
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_keytab_data {
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_keytab_data krb5_kt_ops;
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_keytab_key_proc_args {
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_keytab_key_proc_args krb5_keytab_key_proc_args;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_replay_data {
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_auth_context_data {
/root/projects/freebsd-include-mirror/krb5.h:typedef struct {
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_log_facility {
/root/projects/freebsd-include-mirror/krb5.h:    struct facility *val;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct _krb5_prompt {
/root/projects/freebsd-include-mirror/krb5.h:struct _krb5_get_init_creds_opt_private;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct _krb5_get_init_creds_opt {
/root/projects/freebsd-include-mirror/krb5.h:    struct _krb5_get_init_creds_opt_private *opt_private;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct _krb5_verify_init_creds_opt {
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_verify_opt {
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_krbhst_data;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_krbhst_data *krb5_krbhst_handle;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_krbhst_info {
/root/projects/freebsd-include-mirror/krb5.h:    struct addrinfo *ai;
/root/projects/freebsd-include-mirror/krb5.h:    struct krb5_krbhst_info *next;
/root/projects/freebsd-include-mirror/krb5.h:typedef struct krb5_sendto_ctx_data *krb5_sendto_ctx;
/root/projects/freebsd-include-mirror/krb5.h:struct krb5_plugin;
/root/projects/freebsd-include-mirror/krb5.h:struct credentials; /* this is to keep the compiler happy */
/root/projects/freebsd-include-mirror/krb5.h:struct getargs;
/root/projects/freebsd-include-mirror/krb5.h:struct sockaddr;
/root/projects/freebsd-include-mirror/krb5-protos.h:	struct credentials */*v4creds*/);
/root/projects/freebsd-include-mirror/krb5-protos.h:	struct credentials */*v4creds*/);
/root/projects/freebsd-include-mirror/krb5-protos.h:	void (*/*func*/)(struct et_list **));
/root/projects/freebsd-include-mirror/krb5-protos.h:	struct sockaddr */*sa*/,
/root/projects/freebsd-include-mirror/krb5-protos.h:	struct sockaddr */*sa*/,
/root/projects/freebsd-include-mirror/krb5-protos.h:	struct sockaddr */*sa*/,
/root/projects/freebsd-include-mirror/krb5-protos.h:	struct addrinfo **/*ai*/);
/root/projects/freebsd-include-mirror/krb5-protos.h:	struct getargs */*args*/,
/root/projects/freebsd-include-mirror/krb5-protos.h:	void (*/*usage*/)(int, struct getargs*, int));
/root/projects/freebsd-include-mirror/krb5-protos.h:	const struct sockaddr */*sa*/,
/root/projects/freebsd-include-mirror/krb5-protos.h:	const struct sockaddr */*sa*/,
/root/projects/freebsd-include-mirror/krb5-protos.h:krb5_sockaddr_uninteresting (const struct sockaddr */*sa*/);
/root/projects/freebsd-include-mirror/krb5-protos.h:	struct getargs */*args*/,
/root/projects/freebsd-include-mirror/krb5-v4compat.h:struct ktext {
/root/projects/freebsd-include-mirror/krb5-v4compat.h:struct credentials {
/root/projects/freebsd-include-mirror/krb5-v4compat.h:    struct ktext ticket_st;	/* The ticket itself */
/root/projects/freebsd-include-mirror/krb5-v4compat.h:struct _krb5_krb_auth_data {
/root/projects/freebsd-include-mirror/krb5-v4compat.h:krb5_error_code	_krb5_krb_tf_setup (krb5_context, struct credentials *,
/root/projects/freebsd-include-mirror/krb_err.h:struct et_list;
/root/projects/freebsd-include-mirror/krb_err.h:void initialize_krb_error_table_r(struct et_list **);
/root/projects/freebsd-include-mirror/kvm.h:typedef struct __kvm kvm_t;
/root/projects/freebsd-include-mirror/kvm.h:struct kinfo_proc;
/root/projects/freebsd-include-mirror/kvm.h:struct proc;
/root/projects/freebsd-include-mirror/kvm.h:struct kvm_swap {
/root/projects/freebsd-include-mirror/kvm.h:char	**kvm_getargv(kvm_t *, const struct kinfo_proc *, int);
/root/projects/freebsd-include-mirror/kvm.h:char	**kvm_getenvv(kvm_t *, const struct kinfo_proc *, int);
/root/projects/freebsd-include-mirror/kvm.h:struct kinfo_proc *
/root/projects/freebsd-include-mirror/kvm.h:int	  kvm_getswapinfo(kvm_t *, struct kvm_swap *, int, int);
/root/projects/freebsd-include-mirror/kvm.h:int	  kvm_nlist(kvm_t *, struct nlist *);
/root/projects/freebsd-include-mirror/kvm.h:	    (kvm_t *, const struct kinfo_proc *, unsigned long, char *, size_t);
/root/projects/freebsd-include-mirror/kx509_asn1.h:typedef struct heim_integer {
/root/projects/freebsd-include-mirror/kx509_asn1.h:typedef struct heim_octet_string {
/root/projects/freebsd-include-mirror/kx509_asn1.h:typedef struct heim_bmp_string {
/root/projects/freebsd-include-mirror/kx509_asn1.h:typedef struct heim_universal_string {
/root/projects/freebsd-include-mirror/kx509_asn1.h:typedef struct heim_oid {
/root/projects/freebsd-include-mirror/kx509_asn1.h:typedef struct heim_bit_string {
/root/projects/freebsd-include-mirror/kx509_asn1.h:typedef struct heim_octet_string heim_any;
/root/projects/freebsd-include-mirror/kx509_asn1.h:typedef struct heim_octet_string heim_any_set;
/root/projects/freebsd-include-mirror/kx509_asn1.h:struct units;
/root/projects/freebsd-include-mirror/kx509_asn1.h:typedef struct Kx509Request {
/root/projects/freebsd-include-mirror/kx509_asn1.h:typedef struct Kx509Response {
/root/projects/freebsd-include-mirror/libdisk.h:struct disk {
/root/projects/freebsd-include-mirror/libdisk.h:	struct chunk	*chunks;
/root/projects/freebsd-include-mirror/libdisk.h:struct disk {
/root/projects/freebsd-include-mirror/libdisk.h:	struct chunk	*chunks;
/root/projects/freebsd-include-mirror/libdisk.h:struct chunk {
/root/projects/freebsd-include-mirror/libdisk.h:	struct chunk	*next;
/root/projects/freebsd-include-mirror/libdisk.h:	struct chunk	*part;
/root/projects/freebsd-include-mirror/libdisk.h:	struct disk	*disk;
/root/projects/freebsd-include-mirror/libdisk.h:struct disk *
/root/projects/freebsd-include-mirror/libdisk.h:Free_Disk(struct disk *);
/root/projects/freebsd-include-mirror/libdisk.h:Debug_Disk(struct disk *);
/root/projects/freebsd-include-mirror/libdisk.h:Set_Bios_Geom(struct disk *, u_long, u_long, u_long);
/root/projects/freebsd-include-mirror/libdisk.h:Sanitize_Bios_Geom(struct disk *);
/root/projects/freebsd-include-mirror/libdisk.h:Insert_Chunk(struct chunk *, daddr_t, daddr_t, const char *, chunk_e, int,
/root/projects/freebsd-include-mirror/libdisk.h:Delete_Chunk2(struct disk *, struct chunk *, int);
/root/projects/freebsd-include-mirror/libdisk.h:Delete_Chunk(struct disk *, struct chunk *);
/root/projects/freebsd-include-mirror/libdisk.h:Collapse_Disk(struct disk *);
/root/projects/freebsd-include-mirror/libdisk.h:Collapse_Chunk(struct disk *, struct chunk *);
/root/projects/freebsd-include-mirror/libdisk.h:Create_Chunk(struct disk *, daddr_t, daddr_t, chunk_e, int, u_long, const char *);
/root/projects/freebsd-include-mirror/libdisk.h:All_FreeBSD(struct disk *, int);
/root/projects/freebsd-include-mirror/libdisk.h:CheckRules(const struct disk *);
/root/projects/freebsd-include-mirror/libdisk.h:Set_Boot_Mgr(struct disk *, const u_char *, const size_t, const u_char *,
/root/projects/freebsd-include-mirror/libdisk.h:Set_Boot_Mgr(struct disk *, const u_char *, const size_t);
/root/projects/freebsd-include-mirror/libdisk.h:Set_Boot_Blocks(struct disk *, const u_char *, const u_char *);
/root/projects/freebsd-include-mirror/libdisk.h:Write_Disk(const struct disk *);
/root/projects/freebsd-include-mirror/libdisk.h:Next_Cyl_Aligned(const struct disk *, daddr_t);
/root/projects/freebsd-include-mirror/libdisk.h:Prev_Cyl_Aligned(const struct disk *, daddr_t);
/root/projects/freebsd-include-mirror/libdisk.h:Track_Aligned(const struct disk *, daddr_t);
/root/projects/freebsd-include-mirror/libdisk.h:Next_Track_Aligned(const struct disk *, daddr_t);
/root/projects/freebsd-include-mirror/libdisk.h:Prev_Track_Aligned(const struct disk *, daddr_t);
/root/projects/freebsd-include-mirror/libdisk.h:struct chunk *
/root/projects/freebsd-include-mirror/libdisk.h:Create_Chunk_DWIM(struct disk *, struct chunk *, daddr_t, chunk_e, int,
/root/projects/freebsd-include-mirror/libdisk.h:ShowChunkFlags(struct chunk *);
/root/projects/freebsd-include-mirror/libdisk.h:struct disklabel;
/root/projects/freebsd-include-mirror/libdisk.h:void Fill_Disklabel(struct disklabel *, const struct disk *,
/root/projects/freebsd-include-mirror/libdisk.h:	const struct chunk *);
/root/projects/freebsd-include-mirror/libdisk.h:void Debug_Chunk(struct chunk *);
/root/projects/freebsd-include-mirror/libdisk.h:struct chunk *New_Chunk(void);
/root/projects/freebsd-include-mirror/libdisk.h:void Free_Chunk(struct chunk *);
/root/projects/freebsd-include-mirror/libdisk.h:struct chunk *Clone_Chunk(const struct chunk *);
/root/projects/freebsd-include-mirror/libdisk.h:int Add_Chunk(struct disk *, daddr_t, daddr_t, const char *, chunk_e, int,
/root/projects/freebsd-include-mirror/libdisk.h:struct disklabel *read_disklabel(int, daddr_t, u_long);
/root/projects/freebsd-include-mirror/libdisk.h:struct disk *Int_Open_Disk(const char *, char *);
/root/projects/freebsd-include-mirror/libdisk.h:int Fixup_Names(struct disk *);
/root/projects/freebsd-include-mirror/libdisk.h:int MakeDevChunk(const struct chunk *, const char *);
/root/projects/freebsd-include-mirror/libdisk.h: * Make Write_Disk(struct disk*)
/root/projects/freebsd-include-mirror/libdisk.h: * Make Is_Unchanged(struct disk *d1, struct chunk *c1)
/root/projects/freebsd-include-mirror/libdisk.h: * Underlying data structure:
/root/projects/freebsd-include-mirror/libdisk.h: *		<struct chunk> --> part
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Abbrev	*Dwarf_Abbrev;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Arange	*Dwarf_Arange;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Attribute	*Dwarf_Attribute;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_AttrValue	*Dwarf_AttrValue;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_CU	*Dwarf_CU;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Cie	*Dwarf_Cie;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Debug	*Dwarf_Debug;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Die	*Dwarf_Die;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Fde	*Dwarf_Fde;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Func	*Dwarf_Func;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Inlined_Func *Dwarf_Inlined_Func;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Global	*Dwarf_Global;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Line	*Dwarf_Line;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Type	*Dwarf_Type;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Var	*Dwarf_Var;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Weak	*Dwarf_Weak;
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct {
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct {
/root/projects/freebsd-include-mirror/libdwarf.h:typedef struct _Dwarf_Error {
/root/projects/freebsd-include-mirror/libelf.h:/* Library private data structures */
/root/projects/freebsd-include-mirror/libelf.h:typedef struct _Elf Elf;
/root/projects/freebsd-include-mirror/libelf.h:typedef struct _Elf_Scn Elf_Scn;
/root/projects/freebsd-include-mirror/libelf.h: * An `Elf_Data' structure describes data in an
/root/projects/freebsd-include-mirror/libelf.h:typedef struct _Elf_Data {
/root/projects/freebsd-include-mirror/libelf.h: * An `Elf_Arhdr' structure describes an archive
/root/projects/freebsd-include-mirror/libelf.h:typedef struct {
/root/projects/freebsd-include-mirror/libelf.h:typedef struct {
/root/projects/freebsd-include-mirror/libgeom.h:void geom_stats_snapshot_timestamp(void *, struct timespec *);
/root/projects/freebsd-include-mirror/libgeom.h:struct devstat *geom_stats_snapshot_next(void *);
/root/projects/freebsd-include-mirror/libgeom.h: * These structs are used to build the tree based on the XML.
/root/projects/freebsd-include-mirror/libgeom.h:struct gclass;
/root/projects/freebsd-include-mirror/libgeom.h:struct ggeom;
/root/projects/freebsd-include-mirror/libgeom.h:struct gconsumer;
/root/projects/freebsd-include-mirror/libgeom.h:struct gprovider;
/root/projects/freebsd-include-mirror/libgeom.h:struct gident {
/root/projects/freebsd-include-mirror/libgeom.h:struct gmesh {
/root/projects/freebsd-include-mirror/libgeom.h:	struct gident		*lg_ident;
/root/projects/freebsd-include-mirror/libgeom.h:struct gconfig {
/root/projects/freebsd-include-mirror/libgeom.h:struct gclass {
/root/projects/freebsd-include-mirror/libgeom.h:	struct gconf		lg_config;
/root/projects/freebsd-include-mirror/libgeom.h:struct ggeom {
/root/projects/freebsd-include-mirror/libgeom.h:	struct gclass		*lg_class;
/root/projects/freebsd-include-mirror/libgeom.h:	struct gconf		lg_config;
/root/projects/freebsd-include-mirror/libgeom.h:struct gconsumer {
/root/projects/freebsd-include-mirror/libgeom.h:	struct ggeom		*lg_geom;
/root/projects/freebsd-include-mirror/libgeom.h:	struct gprovider	*lg_provider;
/root/projects/freebsd-include-mirror/libgeom.h:	struct gconf		lg_config;
/root/projects/freebsd-include-mirror/libgeom.h:struct gprovider {
/root/projects/freebsd-include-mirror/libgeom.h:	struct ggeom		*lg_geom;
/root/projects/freebsd-include-mirror/libgeom.h:	struct gconf		lg_config;
/root/projects/freebsd-include-mirror/libgeom.h:struct gident * geom_lookupid(struct gmesh *, const void *);
/root/projects/freebsd-include-mirror/libgeom.h:int geom_xml2tree(struct gmesh *, char *);
/root/projects/freebsd-include-mirror/libgeom.h:int geom_gettree(struct gmesh *);
/root/projects/freebsd-include-mirror/libgeom.h:void geom_deletetree(struct gmesh *);
/root/projects/freebsd-include-mirror/libgeom.h:struct gctl_req;
/root/projects/freebsd-include-mirror/libgeom.h:void gctl_dump(struct gctl_req *, FILE *);
/root/projects/freebsd-include-mirror/libgeom.h:void gctl_free(struct gctl_req *);
/root/projects/freebsd-include-mirror/libgeom.h:struct gctl_req *gctl_get_handle(void);
/root/projects/freebsd-include-mirror/libgeom.h:const char *gctl_issue(struct gctl_req *);
/root/projects/freebsd-include-mirror/libgeom.h:void gctl_ro_param(struct gctl_req *, const char *, int, const void *);
/root/projects/freebsd-include-mirror/libgeom.h:void gctl_rw_param(struct gctl_req *, const char *, int, void *);
/root/projects/freebsd-include-mirror/libproc.h:struct proc_handle;
/root/projects/freebsd-include-mirror/libproc.h:typedef struct prmap {
/root/projects/freebsd-include-mirror/libproc.h:typedef struct lwpstatus {
/root/projects/freebsd-include-mirror/libproc.h:prmap_t *proc_addr2map(struct proc_handle *, uintptr_t);
/root/projects/freebsd-include-mirror/libproc.h:prmap_t *proc_name2map(struct proc_handle *, const char *);
/root/projects/freebsd-include-mirror/libproc.h:char	*proc_objname(struct proc_handle *, uintptr_t, char *, size_t);
/root/projects/freebsd-include-mirror/libproc.h:prmap_t *proc_obj2map(struct proc_handle *, const char *);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_iter_objs(struct proc_handle *, proc_map_f *, void *);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_iter_symbyaddr(struct proc_handle *, const char *, int,
/root/projects/freebsd-include-mirror/libproc.h:int	proc_addr2sym(struct proc_handle *, uintptr_t, char *, size_t, GElf_Sym *);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_attach(pid_t pid, int flags, struct proc_handle **pphdl);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_continue(struct proc_handle *);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_clearflags(struct proc_handle *, int);
/root/projects/freebsd-include-mirror/libproc.h:	    struct proc_handle **);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_detach(struct proc_handle *, int);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_getflags(struct proc_handle *);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_name2sym(struct proc_handle *, const char *, const char *, GElf_Sym *);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_setflags(struct proc_handle *, int);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_state(struct proc_handle *);
/root/projects/freebsd-include-mirror/libproc.h:pid_t	proc_getpid(struct proc_handle *);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_wstatus(struct proc_handle *);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_getwstat(struct proc_handle *);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_read(struct proc_handle *, void *, size_t, size_t);
/root/projects/freebsd-include-mirror/libproc.h:	proc_getlwpstatus(struct proc_handle *);
/root/projects/freebsd-include-mirror/libproc.h:void	proc_free(struct proc_handle *);
/root/projects/freebsd-include-mirror/libproc.h:rd_agent_t *proc_rdagent(struct proc_handle *);
/root/projects/freebsd-include-mirror/libproc.h:void	proc_updatesyms(struct proc_handle *);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_bkptset(struct proc_handle *, uintptr_t, unsigned long *);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_bkptdel(struct proc_handle *, uintptr_t, unsigned long);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_bkptexec(struct proc_handle *, unsigned long);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_regget(struct proc_handle *, proc_reg_t, unsigned long *);
/root/projects/freebsd-include-mirror/libproc.h:int	proc_regset(struct proc_handle *, proc_reg_t, unsigned long);
/root/projects/freebsd-include-mirror/libprocstat.h:struct procstat;
/root/projects/freebsd-include-mirror/libprocstat.h:struct filestat {
/root/projects/freebsd-include-mirror/libprocstat.h:struct vnstat {
/root/projects/freebsd-include-mirror/libprocstat.h:struct ptsstat {
/root/projects/freebsd-include-mirror/libprocstat.h:struct pipestat {
/root/projects/freebsd-include-mirror/libprocstat.h:struct sockstat {
/root/projects/freebsd-include-mirror/libprocstat.h:	struct sockaddr_storage	sa_local;	/* Socket address. */
/root/projects/freebsd-include-mirror/libprocstat.h:	struct sockaddr_storage	sa_peer;	/* Peer address. */
/root/projects/freebsd-include-mirror/libprocstat.h:void	procstat_close(struct procstat *procstat);
/root/projects/freebsd-include-mirror/libprocstat.h:void	procstat_freeprocs(struct procstat *procstat, struct kinfo_proc *p);
/root/projects/freebsd-include-mirror/libprocstat.h:void	procstat_freefiles(struct procstat *procstat,
/root/projects/freebsd-include-mirror/libprocstat.h:    struct filestat_list *head);
/root/projects/freebsd-include-mirror/libprocstat.h:struct filestat_list	*procstat_getfiles(struct procstat *procstat,
/root/projects/freebsd-include-mirror/libprocstat.h:    struct kinfo_proc *kp, int mmapped);
/root/projects/freebsd-include-mirror/libprocstat.h:struct kinfo_proc	*procstat_getprocs(struct procstat *procstat,
/root/projects/freebsd-include-mirror/libprocstat.h:int	procstat_get_pipe_info(struct procstat *procstat, struct filestat *fst,
/root/projects/freebsd-include-mirror/libprocstat.h:    struct pipestat *pipe, char *errbuf);
/root/projects/freebsd-include-mirror/libprocstat.h:int	procstat_get_pts_info(struct procstat *procstat, struct filestat *fst,
/root/projects/freebsd-include-mirror/libprocstat.h:    struct ptsstat *pts, char *errbuf);
/root/projects/freebsd-include-mirror/libprocstat.h:int	procstat_get_socket_info(struct procstat *procstat, struct filestat *fst,
/root/projects/freebsd-include-mirror/libprocstat.h:    struct sockstat *sock, char *errbuf);
/root/projects/freebsd-include-mirror/libprocstat.h:int	procstat_get_vnode_info(struct procstat *procstat, struct filestat *fst,
/root/projects/freebsd-include-mirror/libprocstat.h:    struct vnstat *vn, char *errbuf);
/root/projects/freebsd-include-mirror/libprocstat.h:struct procstat	*procstat_open_sysctl(void);
/root/projects/freebsd-include-mirror/libprocstat.h:struct procstat	*procstat_open_kvm(const char *nlistf, const char *memf);
/root/projects/freebsd-include-mirror/libufs.h: * libufs structures.
/root/projects/freebsd-include-mirror/libufs.h:struct uufsd {
/root/projects/freebsd-include-mirror/libufs.h:	struct csum *d_sbcsum;	/* Superblock summary info */
/root/projects/freebsd-include-mirror/libufs.h:		struct fs d_fs;	/* filesystem information */
/root/projects/freebsd-include-mirror/libufs.h:		struct cg d_cg;	/* cylinder group */
/root/projects/freebsd-include-mirror/libufs.h:ERROR(struct uufsd *u, const char *str)
/root/projects/freebsd-include-mirror/libufs.h:ssize_t bread(struct uufsd *, ufs2_daddr_t, void *, size_t);
/root/projects/freebsd-include-mirror/libufs.h:ssize_t bwrite(struct uufsd *, ufs2_daddr_t, const void *, size_t);
/root/projects/freebsd-include-mirror/libufs.h:int berase(struct uufsd *, ufs2_daddr_t, ufs2_daddr_t);
/root/projects/freebsd-include-mirror/libufs.h:ufs2_daddr_t cgballoc(struct uufsd *);
/root/projects/freebsd-include-mirror/libufs.h:int cgbfree(struct uufsd *, ufs2_daddr_t, long);
/root/projects/freebsd-include-mirror/libufs.h:ino_t cgialloc(struct uufsd *);
/root/projects/freebsd-include-mirror/libufs.h:int cgread(struct uufsd *);
/root/projects/freebsd-include-mirror/libufs.h:int cgread1(struct uufsd *, int);
/root/projects/freebsd-include-mirror/libufs.h:int cgwrite(struct uufsd *);
/root/projects/freebsd-include-mirror/libufs.h:int cgwrite1(struct uufsd *, int);
/root/projects/freebsd-include-mirror/libufs.h:int getino(struct uufsd *, void **, ino_t, int *);
/root/projects/freebsd-include-mirror/libufs.h:int putino(struct uufsd *);
/root/projects/freebsd-include-mirror/libufs.h:int sbread(struct uufsd *);
/root/projects/freebsd-include-mirror/libufs.h:int sbwrite(struct uufsd *, int);
/root/projects/freebsd-include-mirror/libufs.h:int ufs_disk_close(struct uufsd *);
/root/projects/freebsd-include-mirror/libufs.h:int ufs_disk_fillout(struct uufsd *, const char *);
/root/projects/freebsd-include-mirror/libufs.h:int ufs_disk_fillout_blank(struct uufsd *, const char *);
/root/projects/freebsd-include-mirror/libufs.h:int ufs_disk_write(struct uufsd *);
/root/projects/freebsd-include-mirror/libufs.h:void	ffs_clrblock(struct fs *, u_char *, ufs1_daddr_t);
/root/projects/freebsd-include-mirror/libufs.h:void	ffs_clusteracct(struct fs *, struct cg *, ufs1_daddr_t, int);
/root/projects/freebsd-include-mirror/libufs.h:void	ffs_fragacct(struct fs *, int, int32_t [], int);
/root/projects/freebsd-include-mirror/libufs.h:int	ffs_isblock(struct fs *, u_char *, ufs1_daddr_t);
/root/projects/freebsd-include-mirror/libufs.h:int	ffs_isfreeblock(struct fs *, u_char *, ufs1_daddr_t);
/root/projects/freebsd-include-mirror/libufs.h:void	ffs_setblock(struct fs *, u_char *, ufs1_daddr_t);
/root/projects/freebsd-include-mirror/libusb20_desc.h: * structures. All structures which name ends by *DECODED use host byte
/root/projects/freebsd-include-mirror/libusb20_desc.h:	LIBUSB20_ME_IS_RAW,		/* structure excludes length field
/root/projects/freebsd-include-mirror/libusb20_desc.h:	LIBUSB20_ME_IS_ENCODED,		/* structure includes length field */
/root/projects/freebsd-include-mirror/libusb20_desc.h:	LIBUSB20_ME_IS_EMPTY,		/* no structure */
/root/projects/freebsd-include-mirror/libusb20_desc.h:	LIBUSB20_ME_IS_DECODED,		/* structure is recursive */
/root/projects/freebsd-include-mirror/libusb20_desc.h:/* basic helper structures and macros */
/root/projects/freebsd-include-mirror/libusb20_desc.h:struct libusb20_me_struct {
/root/projects/freebsd-include-mirror/libusb20_desc.h:struct libusb20_me_format {
/root/projects/freebsd-include-mirror/libusb20_desc.h:  LIBUSB20_NOT(ismeta) ( struct libusb20_me_struct field; )
/root/projects/freebsd-include-mirror/libusb20_desc.h:  LIBUSB20_NOT(ismeta) ( struct libusb20_me_struct field [arg]; )
/root/projects/freebsd-include-mirror/libusb20_desc.h:  extern const struct libusb20_me_format			\
/root/projects/freebsd-include-mirror/libusb20_desc.h:  struct name##_DECODED {				\
/root/projects/freebsd-include-mirror/libusb20_desc.h:    const struct libusb20_me_format *name##_FORMAT;	\
/root/projects/freebsd-include-mirror/libusb20_desc.h:  const struct libusb20_me_format			\
/root/projects/freebsd-include-mirror/libusb20_desc.h:struct libusb20_endpoint {
/root/projects/freebsd-include-mirror/libusb20_desc.h:	struct LIBUSB20_ENDPOINT_DESC_DECODED desc;
/root/projects/freebsd-include-mirror/libusb20_desc.h:	struct libusb20_me_struct extra;
/root/projects/freebsd-include-mirror/libusb20_desc.h:struct libusb20_interface {
/root/projects/freebsd-include-mirror/libusb20_desc.h:	struct LIBUSB20_INTERFACE_DESC_DECODED desc;
/root/projects/freebsd-include-mirror/libusb20_desc.h:	struct libusb20_me_struct extra;
/root/projects/freebsd-include-mirror/libusb20_desc.h:	struct libusb20_interface *altsetting;
/root/projects/freebsd-include-mirror/libusb20_desc.h:	struct libusb20_endpoint *endpoints;
/root/projects/freebsd-include-mirror/libusb20_desc.h:struct libusb20_config {
/root/projects/freebsd-include-mirror/libusb20_desc.h:	struct LIBUSB20_CONFIG_DESC_DECODED desc;
/root/projects/freebsd-include-mirror/libusb20_desc.h:	struct libusb20_me_struct extra;
/root/projects/freebsd-include-mirror/libusb20_desc.h:	struct libusb20_interface *interface;
/root/projects/freebsd-include-mirror/libusb20_desc.h:uint8_t	libusb20_me_get_1(const struct libusb20_me_struct *ie, uint16_t offset);
/root/projects/freebsd-include-mirror/libusb20_desc.h:uint16_t libusb20_me_get_2(const struct libusb20_me_struct *ie, uint16_t offset);
/root/projects/freebsd-include-mirror/libusb20_desc.h:const uint8_t *libusb20_desc_foreach(const struct libusb20_me_struct *pdesc, const uint8_t *psubdesc);
/root/projects/freebsd-include-mirror/libusb20_desc.h:struct libusb20_config *libusb20_parse_config_desc(const void *config_desc);
/root/projects/freebsd-include-mirror/libusb20.h:struct usb_device_info;
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_transfer;
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_backend;
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_backend_methods;
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_device;
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_device_methods;
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_config;
/root/projects/freebsd-include-mirror/libusb20.h:struct LIBUSB20_CONTROL_SETUP_DECODED;
/root/projects/freebsd-include-mirror/libusb20.h:struct LIBUSB20_DEVICE_DESC_DECODED;
/root/projects/freebsd-include-mirror/libusb20.h:typedef void (libusb20_tr_callback_t)(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_quirk {
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_tr_close(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_tr_open(struct libusb20_transfer *xfer, uint32_t max_buf_size, uint32_t max_frame_count, uint8_t ep_no);
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_transfer *libusb20_tr_get_pointer(struct libusb20_device *pdev, uint16_t tr_index);
/root/projects/freebsd-include-mirror/libusb20.h:uint16_t libusb20_tr_get_time_complete(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:uint32_t libusb20_tr_get_actual_frames(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:uint32_t libusb20_tr_get_actual_length(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:uint32_t libusb20_tr_get_max_frames(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:uint32_t libusb20_tr_get_max_packet_length(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:uint32_t libusb20_tr_get_max_total_length(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:uint8_t	libusb20_tr_get_status(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:uint8_t	libusb20_tr_pending(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_callback_wrapper(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_clear_stall_sync(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_drain(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_set_buffer(struct libusb20_transfer *xfer, void *buffer, uint16_t fr_index);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_set_callback(struct libusb20_transfer *xfer, libusb20_tr_callback_t *cb);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_set_flags(struct libusb20_transfer *xfer, uint8_t flags);
/root/projects/freebsd-include-mirror/libusb20.h:uint32_t libusb20_tr_get_length(struct libusb20_transfer *xfer, uint16_t fr_index);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_set_length(struct libusb20_transfer *xfer, uint32_t length, uint16_t fr_index);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_set_priv_sc0(struct libusb20_transfer *xfer, void *sc0);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_set_priv_sc1(struct libusb20_transfer *xfer, void *sc1);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_set_timeout(struct libusb20_transfer *xfer, uint32_t timeout);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_set_total_frames(struct libusb20_transfer *xfer, uint32_t nFrames);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_setup_bulk(struct libusb20_transfer *xfer, void *pbuf, uint32_t length, uint32_t timeout);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_setup_control(struct libusb20_transfer *xfer, void *psetup, void *pbuf, uint32_t timeout);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_setup_intr(struct libusb20_transfer *xfer, void *pbuf, uint32_t length, uint32_t timeout);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_setup_isoc(struct libusb20_transfer *xfer, void *pbuf, uint32_t length, uint16_t fr_index);
/root/projects/freebsd-include-mirror/libusb20.h:uint8_t	libusb20_tr_bulk_intr_sync(struct libusb20_transfer *xfer, void *pbuf, uint32_t length, uint32_t *pactlen, uint32_t timeout);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_start(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_stop(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_tr_submit(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:void   *libusb20_tr_get_priv_sc0(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:void   *libusb20_tr_get_priv_sc1(struct libusb20_transfer *xfer);
/root/projects/freebsd-include-mirror/libusb20.h:const char *libusb20_dev_get_backend_name(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:const char *libusb20_dev_get_desc(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_close(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_detach_kernel_driver(struct libusb20_device *pdev, uint8_t iface_index);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_set_config_index(struct libusb20_device *pdev, uint8_t configIndex);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_get_debug(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_get_fd(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_kernel_driver_active(struct libusb20_device *pdev, uint8_t iface_index);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_open(struct libusb20_device *pdev, uint16_t transfer_max);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_process(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_request_sync(struct libusb20_device *pdev, struct LIBUSB20_CONTROL_SETUP_DECODED *setup, void *data, uint16_t *pactlen, uint32_t timeout, uint8_t flags);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_req_string_sync(struct libusb20_device *pdev, uint8_t index, uint16_t langid, void *ptr, uint16_t len);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_req_string_simple_sync(struct libusb20_device *pdev, uint8_t index, void *ptr, uint16_t len);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_reset(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_check_connected(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_set_power_mode(struct libusb20_device *pdev, uint8_t power_mode);
/root/projects/freebsd-include-mirror/libusb20.h:uint8_t	libusb20_dev_get_power_mode(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_set_alt_index(struct libusb20_device *pdev, uint8_t iface_index, uint8_t alt_index);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_get_info(struct libusb20_device *pdev, struct usb_device_info *pinfo);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_dev_get_iface_desc(struct libusb20_device *pdev, uint8_t iface_index, char *buf, uint8_t len);
/root/projects/freebsd-include-mirror/libusb20.h:struct LIBUSB20_DEVICE_DESC_DECODED *libusb20_dev_get_device_desc(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_config *libusb20_dev_alloc_config(struct libusb20_device *pdev, uint8_t config_index);
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_device *libusb20_dev_alloc(void);
/root/projects/freebsd-include-mirror/libusb20.h:uint8_t	libusb20_dev_get_address(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:uint8_t	libusb20_dev_get_parent_address(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:uint8_t	libusb20_dev_get_parent_port(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:uint8_t	libusb20_dev_get_bus_number(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:uint8_t	libusb20_dev_get_mode(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:uint8_t	libusb20_dev_get_speed(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:uint8_t	libusb20_dev_get_config_index(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_dev_free(struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_dev_set_debug(struct libusb20_device *pdev, int debug);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_dev_wait_process(struct libusb20_device *pdev, int timeout);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_be_get_dev_quirk(struct libusb20_backend *pbe, uint16_t index, struct libusb20_quirk *pq);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_be_get_quirk_name(struct libusb20_backend *pbe, uint16_t index, struct libusb20_quirk *pq);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_be_add_dev_quirk(struct libusb20_backend *pbe, struct libusb20_quirk *pq);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_be_remove_dev_quirk(struct libusb20_backend *pbe, struct libusb20_quirk *pq);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_be_get_template(struct libusb20_backend *pbe, int *ptemp);
/root/projects/freebsd-include-mirror/libusb20.h:int	libusb20_be_set_template(struct libusb20_backend *pbe, int temp);
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_backend *libusb20_be_alloc(const struct libusb20_backend_methods *methods);
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_backend *libusb20_be_alloc_default(void);
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_backend *libusb20_be_alloc_freebsd(void);
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_backend *libusb20_be_alloc_linux(void);
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_backend *libusb20_be_alloc_ugen20(void);
/root/projects/freebsd-include-mirror/libusb20.h:struct libusb20_device *libusb20_be_device_foreach(struct libusb20_backend *pbe, struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_be_dequeue_device(struct libusb20_backend *pbe, struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_be_enqueue_device(struct libusb20_backend *pbe, struct libusb20_device *pdev);
/root/projects/freebsd-include-mirror/libusb20.h:void	libusb20_be_free(struct libusb20_backend *pbe);
/root/projects/freebsd-include-mirror/libusb.h:/* libusb structures */
/root/projects/freebsd-include-mirror/libusb.h:struct libusb_context;
/root/projects/freebsd-include-mirror/libusb.h:struct libusb_device;
/root/projects/freebsd-include-mirror/libusb.h:struct libusb_transfer;
/root/projects/freebsd-include-mirror/libusb.h:struct libusb_device_handle;
/root/projects/freebsd-include-mirror/libusb.h:struct libusb_pollfd {
/root/projects/freebsd-include-mirror/libusb.h:typedef struct libusb_context libusb_context;
/root/projects/freebsd-include-mirror/libusb.h:typedef struct libusb_device libusb_device;
/root/projects/freebsd-include-mirror/libusb.h:typedef struct libusb_device_handle libusb_device_handle;
/root/projects/freebsd-include-mirror/libusb.h:typedef struct libusb_pollfd libusb_pollfd;
/root/projects/freebsd-include-mirror/libusb.h:typedef struct libusb_device_descriptor {
/root/projects/freebsd-include-mirror/libusb.h:typedef struct libusb_endpoint_descriptor {
/root/projects/freebsd-include-mirror/libusb.h:typedef struct libusb_interface_descriptor {
/root/projects/freebsd-include-mirror/libusb.h:	struct libusb_endpoint_descriptor *endpoint;
/root/projects/freebsd-include-mirror/libusb.h:typedef struct libusb_interface {
/root/projects/freebsd-include-mirror/libusb.h:	struct libusb_interface_descriptor *altsetting;
/root/projects/freebsd-include-mirror/libusb.h:typedef struct libusb_config_descriptor {
/root/projects/freebsd-include-mirror/libusb.h:	struct libusb_interface *interface;
/root/projects/freebsd-include-mirror/libusb.h:typedef struct libusb_control_setup {
/root/projects/freebsd-include-mirror/libusb.h:typedef struct libusb_iso_packet_descriptor {
/root/projects/freebsd-include-mirror/libusb.h:typedef void (*libusb_transfer_cb_fn) (struct libusb_transfer *transfer);
/root/projects/freebsd-include-mirror/libusb.h:typedef struct libusb_transfer {
/root/projects/freebsd-include-mirror/libusb.h:	struct libusb_iso_packet_descriptor iso_packet_desc[0];
/root/projects/freebsd-include-mirror/libusb.h:void	libusb_exit(struct libusb_context *ctx);
/root/projects/freebsd-include-mirror/libusb.h:int	libusb_get_device_descriptor(libusb_device * dev, struct libusb_device_descriptor *desc);
/root/projects/freebsd-include-mirror/libusb.h:int	libusb_get_active_config_descriptor(libusb_device * dev, struct libusb_config_descriptor **config);
/root/projects/freebsd-include-mirror/libusb.h:int	libusb_get_config_descriptor(libusb_device * dev, uint8_t config_index, struct libusb_config_descriptor **config);
/root/projects/freebsd-include-mirror/libusb.h:int	libusb_get_config_descriptor_by_value(libusb_device * dev, uint8_t bConfigurationValue, struct libusb_config_descriptor **config);
/root/projects/freebsd-include-mirror/libusb.h:void	libusb_free_config_descriptor(struct libusb_config_descriptor *config);
/root/projects/freebsd-include-mirror/libusb.h:struct libusb_transfer *libusb_alloc_transfer(int iso_packets);
/root/projects/freebsd-include-mirror/libusb.h:void	libusb_free_transfer(struct libusb_transfer *transfer);
/root/projects/freebsd-include-mirror/libusb.h:int	libusb_submit_transfer(struct libusb_transfer *transfer);
/root/projects/freebsd-include-mirror/libusb.h:int	libusb_cancel_transfer(struct libusb_transfer *transfer);
/root/projects/freebsd-include-mirror/libusb.h:uint8_t *libusb_get_iso_packet_buffer(struct libusb_transfer *transfer, uint32_t index);
/root/projects/freebsd-include-mirror/libusb.h:uint8_t *libusb_get_iso_packet_buffer_simple(struct libusb_transfer *transfer, uint32_t index);
/root/projects/freebsd-include-mirror/libusb.h:void	libusb_set_iso_packet_lengths(struct libusb_transfer *transfer, uint32_t length);
/root/projects/freebsd-include-mirror/libusb.h:uint8_t *libusb_control_transfer_get_data(struct libusb_transfer *transfer);
/root/projects/freebsd-include-mirror/libusb.h:struct libusb_control_setup *libusb_control_transfer_get_setup(struct libusb_transfer *transfer);
/root/projects/freebsd-include-mirror/libusb.h:void	libusb_fill_control_transfer(struct libusb_transfer *transfer, libusb_device_handle *devh, uint8_t *buf, libusb_transfer_cb_fn callback, void *user_data, uint32_t timeout);
/root/projects/freebsd-include-mirror/libusb.h:void	libusb_fill_bulk_transfer(struct libusb_transfer *transfer, libusb_device_handle *devh, uint8_t endpoint, uint8_t *buf, int length, libusb_transfer_cb_fn callback, void *user_data, uint32_t timeout);
/root/projects/freebsd-include-mirror/libusb.h:void	libusb_fill_interrupt_transfer(struct libusb_transfer *transfer, libusb_device_handle *devh, uint8_t endpoint, uint8_t *buf, int length, libusb_transfer_cb_fn callback, void *user_data, uint32_t timeout);
/root/projects/freebsd-include-mirror/libusb.h:void	libusb_fill_iso_transfer(struct libusb_transfer *transfer, libusb_device_handle *devh, uint8_t endpoint, uint8_t *buf, int length, int npacket, libusb_transfer_cb_fn callback, void *user_data, uint32_t timeout);
/root/projects/freebsd-include-mirror/libusb.h:int	libusb_wait_for_event(libusb_context * ctx, struct timeval *tv);
/root/projects/freebsd-include-mirror/libusb.h:int	libusb_handle_events_timeout(libusb_context * ctx, struct timeval *tv);
/root/projects/freebsd-include-mirror/libusb.h:int	libusb_handle_events_locked(libusb_context * ctx, struct timeval *tv);
/root/projects/freebsd-include-mirror/libusb.h:int	libusb_get_next_timeout(libusb_context * ctx, struct timeval *tv);
/root/projects/freebsd-include-mirror/libusb.h:struct libusb_pollfd **libusb_get_pollfds(libusb_context * ctx);
/root/projects/freebsd-include-mirror/libutil.h:typedef struct _property {
/root/projects/freebsd-include-mirror/libutil.h:	struct _property *next;
/root/projects/freebsd-include-mirror/libutil.h:struct pidfh {
/root/projects/freebsd-include-mirror/libutil.h:struct termios;
/root/projects/freebsd-include-mirror/libutil.h:struct winsize;
/root/projects/freebsd-include-mirror/libutil.h:struct in_addr;
/root/projects/freebsd-include-mirror/libutil.h:struct kinfo_file;
/root/projects/freebsd-include-mirror/libutil.h:struct kinfo_proc;
/root/projects/freebsd-include-mirror/libutil.h:struct kinfo_vmentry;
/root/projects/freebsd-include-mirror/libutil.h:		     struct termios *_termp, struct winsize *_winp);
/root/projects/freebsd-include-mirror/libutil.h:		     struct termios *_termp, struct winsize *_winp);
/root/projects/freebsd-include-mirror/libutil.h:int	realhostname(char *host, size_t hsize, const struct in_addr *ip);
/root/projects/freebsd-include-mirror/libutil.h:struct sockaddr;
/root/projects/freebsd-include-mirror/libutil.h:int	realhostname_sa(char *host, size_t hsize, struct sockaddr *addr,
/root/projects/freebsd-include-mirror/libutil.h:struct kinfo_file *
/root/projects/freebsd-include-mirror/libutil.h:struct kinfo_vmentry *
/root/projects/freebsd-include-mirror/libutil.h:struct kinfo_proc *
/root/projects/freebsd-include-mirror/libutil.h:struct kinfo_proc *
/root/projects/freebsd-include-mirror/libutil.h:int	pw_copy(int _ffd, int _tfd, const struct passwd *_pw, struct passwd *_old_pw);
/root/projects/freebsd-include-mirror/libutil.h:struct passwd *pw_dup(const struct passwd *_pw);
/root/projects/freebsd-include-mirror/libutil.h:int	pw_equal(const struct passwd *_pw1, const struct passwd *_pw2);
/root/projects/freebsd-include-mirror/libutil.h:char	*pw_make(const struct passwd *_pw);
/root/projects/freebsd-include-mirror/libutil.h:struct passwd *pw_scan(const char *_line, int _flags);
/root/projects/freebsd-include-mirror/libutil.h:int	gr_equal(const struct group *gr1, const struct group *gr2);
/root/projects/freebsd-include-mirror/libutil.h:char	*gr_make(const struct group *gr);
/root/projects/freebsd-include-mirror/libutil.h:struct group *gr_dup(const struct group *gr);
/root/projects/freebsd-include-mirror/libutil.h:struct group *gr_scan(const char *line);
/root/projects/freebsd-include-mirror/libutil.h:struct pidfh *pidfile_open(const char *path, mode_t mode, pid_t *pidptr);
/root/projects/freebsd-include-mirror/libutil.h:int pidfile_write(struct pidfh *pfh);
/root/projects/freebsd-include-mirror/libutil.h:int pidfile_close(struct pidfh *pfh);
/root/projects/freebsd-include-mirror/libutil.h:int pidfile_remove(struct pidfh *pfh);
/root/projects/freebsd-include-mirror/libutil.h:struct quotafile;
/root/projects/freebsd-include-mirror/libutil.h:struct fstab;
/root/projects/freebsd-include-mirror/libutil.h:struct quotafile *quota_open(struct fstab *, int, int);
/root/projects/freebsd-include-mirror/libutil.h:void quota_close(struct quotafile *);
/root/projects/freebsd-include-mirror/libutil.h:int quota_on(struct quotafile *);
/root/projects/freebsd-include-mirror/libutil.h:int quota_off(struct quotafile *);
/root/projects/freebsd-include-mirror/libutil.h:const char *quota_fsname(const struct quotafile *);
/root/projects/freebsd-include-mirror/libutil.h:const char *quota_qfname(const struct quotafile *);
/root/projects/freebsd-include-mirror/libutil.h:int quota_maxid(struct quotafile *);
/root/projects/freebsd-include-mirror/libutil.h:int quota_check_path(const struct quotafile *, const char *path);
/root/projects/freebsd-include-mirror/libutil.h:int quota_read(struct quotafile *, struct dqblk *, int);
/root/projects/freebsd-include-mirror/libutil.h:int quota_write_limits(struct quotafile *, struct dqblk *, int);
/root/projects/freebsd-include-mirror/libutil.h:int quota_write_usage(struct quotafile *, struct dqblk *, int);
/root/projects/freebsd-include-mirror/libutil.h:int quota_convert(struct quotafile *, int);
/root/projects/freebsd-include-mirror/linker_set.h: * For ELF, this is done by constructing a separate segment for each set.
/root/projects/freebsd-include-mirror/locale.h:struct lconv {
/root/projects/freebsd-include-mirror/locale.h:struct lconv	*localeconv(void);
/root/projects/freebsd-include-mirror/login_cap.h:typedef struct login_cap {
/root/projects/freebsd-include-mirror/login_cap.h:typedef struct login_time {
/root/projects/freebsd-include-mirror/login_cap.h:struct passwd;
/root/projects/freebsd-include-mirror/login_cap.h:login_cap_t *login_getclassbyname(const char *, const struct passwd *);
/root/projects/freebsd-include-mirror/login_cap.h:login_cap_t *login_getpwclass(const struct passwd *);
/root/projects/freebsd-include-mirror/login_cap.h:login_cap_t *login_getuserclass(const struct passwd *);
/root/projects/freebsd-include-mirror/login_cap.h:int setusercontext(login_cap_t *, const struct passwd *, uid_t, unsigned int);
/root/projects/freebsd-include-mirror/login_cap.h:void setclassenvironment(login_cap_t *, const struct passwd *, int);
/root/projects/freebsd-include-mirror/login_cap.h:struct tm;
/root/projects/freebsd-include-mirror/login_cap.h:int in_ltm(const login_time_t *, struct tm *, time_t *);
/root/projects/freebsd-include-mirror/login_cap.h:int in_ltms(const login_time_t *, struct tm *, time_t *);
/root/projects/freebsd-include-mirror/magic.h:typedef struct magic_set *magic_t;
/root/projects/freebsd-include-mirror/md2.h:typedef struct MD2Context {
/root/projects/freebsd-include-mirror/md4.h:typedef struct MD4Context {
/root/projects/freebsd-include-mirror/memstat.h: * corrupting internal libmemstat(3) data structures.  A compile time check
/root/projects/freebsd-include-mirror/memstat.h: * struct memory_type_list, and accessed via memstat_get_error(list).
/root/projects/freebsd-include-mirror/memstat.h: * Forward declare struct memory_type, which holds per-type properties and
/root/projects/freebsd-include-mirror/memstat.h:struct memory_type;
/root/projects/freebsd-include-mirror/memstat.h: * struct memory_type_list is the head of a list of memory types and
/root/projects/freebsd-include-mirror/memstat.h:struct memory_type_list;
/root/projects/freebsd-include-mirror/memstat.h:struct memory_type_list	*memstat_mtl_alloc(void);
/root/projects/freebsd-include-mirror/memstat.h:struct memory_type	*memstat_mtl_first(struct memory_type_list *list);
/root/projects/freebsd-include-mirror/memstat.h:struct memory_type	*memstat_mtl_next(struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:struct memory_type	*memstat_mtl_find(struct memory_type_list *list,
/root/projects/freebsd-include-mirror/memstat.h:void	memstat_mtl_free(struct memory_type_list *list);
/root/projects/freebsd-include-mirror/memstat.h:int	memstat_mtl_geterror(struct memory_type_list *list);
/root/projects/freebsd-include-mirror/memstat.h:int	memstat_sysctl_all(struct memory_type_list *list, int flags);
/root/projects/freebsd-include-mirror/memstat.h:int	memstat_sysctl_malloc(struct memory_type_list *list, int flags);
/root/projects/freebsd-include-mirror/memstat.h:int	memstat_sysctl_uma(struct memory_type_list *list, int flags);
/root/projects/freebsd-include-mirror/memstat.h:int	memstat_kvm_all(struct memory_type_list *list, void *kvm_handle);
/root/projects/freebsd-include-mirror/memstat.h:int	memstat_kvm_malloc(struct memory_type_list *list, void *kvm_handle);
/root/projects/freebsd-include-mirror/memstat.h:int	memstat_kvm_uma(struct memory_type_list *list, void *kvm_handle);
/root/projects/freebsd-include-mirror/memstat.h: * Accessor methods for struct memory_type.
/root/projects/freebsd-include-mirror/memstat.h:const char	*memstat_get_name(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:int		 memstat_get_allocator(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_countlimit(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_byteslimit(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_sizemask(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_size(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_memalloced(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_memfreed(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_numallocs(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_numfrees(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_bytes(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_count(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_free(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_failures(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_sleeps(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:void		*memstat_get_caller_pointer(const struct memory_type *mtp,
/root/projects/freebsd-include-mirror/memstat.h:void		 memstat_set_caller_pointer(struct memory_type *mtp,
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_caller_uint64(const struct memory_type *mtp,
/root/projects/freebsd-include-mirror/memstat.h:void		 memstat_set_caller_uint64(struct memory_type *mtp, int index,
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_zonefree(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_kegfree(const struct memory_type *mtp);
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_percpu_memalloced(const struct memory_type *mtp,
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_percpu_memfreed(const struct memory_type *mtp,
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_percpu_numallocs(const struct memory_type *mtp,
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_percpu_numfrees(const struct memory_type *mtp,
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_percpu_sizemask(const struct memory_type *mtp,
/root/projects/freebsd-include-mirror/memstat.h:		    const struct memory_type *mtp, int cpu, int index);
/root/projects/freebsd-include-mirror/memstat.h:void		 memstat_set_percpu_caller_pointer(struct memory_type *mtp,
/root/projects/freebsd-include-mirror/memstat.h:		    const struct memory_type *mtp, int cpu, int index);
/root/projects/freebsd-include-mirror/memstat.h:void		 memstat_set_percpu_caller_uint64(struct memory_type *mtp,
/root/projects/freebsd-include-mirror/memstat.h:uint64_t	 memstat_get_percpu_free(const struct memory_type *mtp,
/root/projects/freebsd-include-mirror/menu.h:typedef struct
/root/projects/freebsd-include-mirror/menu.h:typedef struct tagITEM 
/root/projects/freebsd-include-mirror/menu.h:  struct tagMENU *imenu;      /* Pointer to parent menu                    */
/root/projects/freebsd-include-mirror/menu.h:  struct tagITEM *left;       /* neighbor items                            */
/root/projects/freebsd-include-mirror/menu.h:  struct tagITEM *right;
/root/projects/freebsd-include-mirror/menu.h:  struct tagITEM *up;
/root/projects/freebsd-include-mirror/menu.h:  struct tagITEM *down;
/root/projects/freebsd-include-mirror/menu.h:typedef void (*Menu_Hook)(struct tagMENU *);
/root/projects/freebsd-include-mirror/menu.h:typedef struct tagMENU 
/root/projects/freebsd-include-mirror/mp.h:typedef struct _mint {
/root/projects/freebsd-include-mirror/mpool.h:/* The BKT structures are the elements of the queues. */
/root/projects/freebsd-include-mirror/mpool.h:typedef struct _bkt {
/root/projects/freebsd-include-mirror/mpool.h:typedef struct MPOOL {
/root/projects/freebsd-include-mirror/mqueue.h:struct sigevent;
/root/projects/freebsd-include-mirror/mqueue.h:struct timespec;
/root/projects/freebsd-include-mirror/mqueue.h:int	mq_getattr(mqd_t, struct mq_attr *);
/root/projects/freebsd-include-mirror/mqueue.h:int	mq_notify(mqd_t, const struct sigevent *);
/root/projects/freebsd-include-mirror/mqueue.h:int	mq_setattr(mqd_t, const struct mq_attr *__restrict,
/root/projects/freebsd-include-mirror/mqueue.h:		struct mq_attr *__restrict);
/root/projects/freebsd-include-mirror/mqueue.h:		unsigned *__restrict, const struct timespec *__restrict);
/root/projects/freebsd-include-mirror/mqueue.h:		const struct timespec *);
/root/projects/freebsd-include-mirror/ncurses_dll.h:/* but this structure may be useful at some point for an MSVC build */
/root/projects/freebsd-include-mirror/ncurses.h: * Definition used to make WINDOW and similar structs opaque.
/root/projects/freebsd-include-mirror/ncurses.h:typedef struct screen  SCREEN;
/root/projects/freebsd-include-mirror/ncurses.h:typedef struct _win_st WINDOW;
/root/projects/freebsd-include-mirror/ncurses.h:typedef struct
/root/projects/freebsd-include-mirror/ncurses.h:struct ldat;
/root/projects/freebsd-include-mirror/ncurses.h:struct _win_st
/root/projects/freebsd-include-mirror/ncurses.h:	struct ldat *_line;	/* the actual line data */
/root/projects/freebsd-include-mirror/ncurses.h:	struct pdat
/root/projects/freebsd-include-mirror/ncurses.h:typedef struct
/root/projects/freebsd-include-mirror/ncurses.h:	struct
/root/projects/freebsd-include-mirror/ncurses.h:typedef struct
/root/projects/freebsd-include-mirror/ncurses.h:typedef struct
/root/projects/freebsd-include-mirror/ndbm.h:typedef struct {
/root/projects/freebsd-include-mirror/netconfig.h:struct netconfig {
/root/projects/freebsd-include-mirror/netconfig.h:typedef struct {
/root/projects/freebsd-include-mirror/netconfig.h:	struct netconfig **nc_head;
/root/projects/freebsd-include-mirror/netconfig.h:	struct netconfig **nc_curr;
/root/projects/freebsd-include-mirror/netconfig.h:struct netconfig *getnetconfig(void *);
/root/projects/freebsd-include-mirror/netconfig.h:struct netconfig *getnetconfigent(const char *);
/root/projects/freebsd-include-mirror/netconfig.h:void freenetconfigent(struct netconfig *);
/root/projects/freebsd-include-mirror/netconfig.h:struct netconfig *getnetpath(void *);
/root/projects/freebsd-include-mirror/netdb.h:struct hostent {
/root/projects/freebsd-include-mirror/netdb.h:struct netent {
/root/projects/freebsd-include-mirror/netdb.h:struct servent {
/root/projects/freebsd-include-mirror/netdb.h:struct protoent {
/root/projects/freebsd-include-mirror/netdb.h:struct addrinfo {
/root/projects/freebsd-include-mirror/netdb.h:	struct	sockaddr *ai_addr;	/* binary address */
/root/projects/freebsd-include-mirror/netdb.h:	struct	addrinfo *ai_next;	/* next structure in linked list */
/root/projects/freebsd-include-mirror/netdb.h:struct hostent	*gethostbyaddr(const void *, socklen_t, int);
/root/projects/freebsd-include-mirror/netdb.h:struct hostent	*gethostbyname(const char *);
/root/projects/freebsd-include-mirror/netdb.h:struct hostent	*gethostent(void);
/root/projects/freebsd-include-mirror/netdb.h:struct netent	*getnetbyaddr(uint32_t, int);
/root/projects/freebsd-include-mirror/netdb.h:struct netent	*getnetbyname(const char *);
/root/projects/freebsd-include-mirror/netdb.h:struct netent	*getnetent(void);
/root/projects/freebsd-include-mirror/netdb.h:struct protoent	*getprotobyname(const char *);
/root/projects/freebsd-include-mirror/netdb.h:struct protoent	*getprotobynumber(int);
/root/projects/freebsd-include-mirror/netdb.h:struct protoent	*getprotoent(void);
/root/projects/freebsd-include-mirror/netdb.h:struct servent	*getservbyname(const char *, const char *);
/root/projects/freebsd-include-mirror/netdb.h:struct servent	*getservbyport(int, const char *);
/root/projects/freebsd-include-mirror/netdb.h:struct servent	*getservent(void);
/root/projects/freebsd-include-mirror/netdb.h:			    const struct addrinfo *, struct addrinfo **);
/root/projects/freebsd-include-mirror/netdb.h:int		getnameinfo(const struct sockaddr *, socklen_t, char *,
/root/projects/freebsd-include-mirror/netdb.h:void		freeaddrinfo(struct addrinfo *);
/root/projects/freebsd-include-mirror/netdb.h:void		freehostent(struct hostent *);
/root/projects/freebsd-include-mirror/netdb.h:int		gethostbyaddr_r(const void *, socklen_t, int, struct hostent *,
/root/projects/freebsd-include-mirror/netdb.h:    char *, size_t, struct hostent **, int *);
/root/projects/freebsd-include-mirror/netdb.h:int		gethostbyname_r(const char *, struct hostent *, char *, size_t,
/root/projects/freebsd-include-mirror/netdb.h:    struct hostent **, int *);
/root/projects/freebsd-include-mirror/netdb.h:struct hostent	*gethostbyname2(const char *, int);
/root/projects/freebsd-include-mirror/netdb.h:int		gethostbyname2_r(const char *, int, struct hostent *, char *,
/root/projects/freebsd-include-mirror/netdb.h:    size_t, struct hostent **, int *);
/root/projects/freebsd-include-mirror/netdb.h:int		gethostent_r(struct hostent *, char *, size_t,
/root/projects/freebsd-include-mirror/netdb.h:    struct hostent **, int *);
/root/projects/freebsd-include-mirror/netdb.h:struct hostent	*getipnodebyaddr(const void *, size_t, int, int *);
/root/projects/freebsd-include-mirror/netdb.h:struct hostent	*getipnodebyname(const char *, int, int, int *);
/root/projects/freebsd-include-mirror/netdb.h:int		getnetbyaddr_r(uint32_t, int, struct netent *, char *, size_t,
/root/projects/freebsd-include-mirror/netdb.h:    struct netent**, int *);
/root/projects/freebsd-include-mirror/netdb.h:int		getnetbyname_r(const char *, struct netent *, char *, size_t,
/root/projects/freebsd-include-mirror/netdb.h:    struct netent **, int *);
/root/projects/freebsd-include-mirror/netdb.h:int		getnetent_r(struct netent *, char *, size_t, struct netent **,
/root/projects/freebsd-include-mirror/netdb.h:int		getprotobyname_r(const char *, struct protoent *, char *,
/root/projects/freebsd-include-mirror/netdb.h:    size_t, struct protoent **);
/root/projects/freebsd-include-mirror/netdb.h:int		getprotobynumber_r(int, struct protoent *, char *, size_t,
/root/projects/freebsd-include-mirror/netdb.h:    struct protoent **);
/root/projects/freebsd-include-mirror/netdb.h:int		getprotoent_r(struct protoent *, char *, size_t,
/root/projects/freebsd-include-mirror/netdb.h:    struct protoent **);
/root/projects/freebsd-include-mirror/netdb.h:int		getservbyname_r(const char *, const char *, struct servent *,
/root/projects/freebsd-include-mirror/netdb.h:    char *, size_t, struct servent **);
/root/projects/freebsd-include-mirror/netdb.h:int		getservbyport_r(int, const char *, struct servent *, char *,
/root/projects/freebsd-include-mirror/netdb.h:    size_t, struct servent **);
/root/projects/freebsd-include-mirror/netdb.h:int		getservent_r(struct servent *, char *, size_t,
/root/projects/freebsd-include-mirror/netdb.h:    struct servent **);
/root/projects/freebsd-include-mirror/netgraph.h:		const struct ng_mesg *, const void *, size_t);
/root/projects/freebsd-include-mirror/netgraph.h:int	NgRecvMsg(int, struct ng_mesg *, size_t, char *);
/root/projects/freebsd-include-mirror/netgraph.h:int	NgAllocRecvMsg(int, struct ng_mesg **, char *);
/root/projects/freebsd-include-mirror/netgraph.h:int	NgRecvAsciiMsg(int, struct ng_mesg *, size_t, char *);
/root/projects/freebsd-include-mirror/netgraph.h:int	NgAllocRecvAsciiMsg(int, struct ng_mesg **, char *);
/root/projects/freebsd-include-mirror/nlist.h:int nlist(const char *, struct nlist *);
/root/projects/freebsd-include-mirror/nl_types.h:struct _nls_cat_hdr {
/root/projects/freebsd-include-mirror/nl_types.h:struct _nls_set_hdr {
/root/projects/freebsd-include-mirror/nl_types.h:struct _nls_msg_hdr {
/root/projects/freebsd-include-mirror/nl_types.h:typedef struct __nl_cat_d {
/root/projects/freebsd-include-mirror/nsswitch.h:typedef struct _ns_dtab {
/root/projects/freebsd-include-mirror/nsswitch.h:typedef struct _ns_src {
/root/projects/freebsd-include-mirror/nsswitch.h:typedef struct _ns_mtab {
/root/projects/freebsd-include-mirror/nsswitch.h: * private data structures for back-end nsswitch implementation
/root/projects/freebsd-include-mirror/nsswitch.h:typedef struct _ns_dbt {
/root/projects/freebsd-include-mirror/nsswitch.h:typedef struct _ns_mod {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct heim_integer {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct heim_octet_string {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct heim_bmp_string {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct heim_universal_string {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct heim_oid {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct heim_bit_string {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct heim_octet_string heim_any;
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct heim_octet_string heim_any_set;
/root/projects/freebsd-include-mirror/ocsp_asn1.h:struct units;
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct OCSPCertStatus {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:    struct  {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct OCSPCertID {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct OCSPSingleResponse {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct OCSPInnerRequest {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct OCSPTBSRequest {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct OCSPSignature {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct OCSPRequest {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct OCSPResponseBytes {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct OCSPResponse {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct OCSPResponderID {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct OCSPResponseData {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:typedef struct OCSPBasicOCSPResponse {
/root/projects/freebsd-include-mirror/ocsp_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/omp.h:/* These two structures get edited by the libgomp build process to 
/root/projects/freebsd-include-mirror/omp.h:typedef struct
/root/projects/freebsd-include-mirror/omp.h:typedef struct
/root/projects/freebsd-include-mirror/opie.h:/* opie.h: Data structures and values for the OPIE authentication
/root/projects/freebsd-include-mirror/opie.h:		struct opie_otpkey and made many functions use it. Added
/root/projects/freebsd-include-mirror/opie.h:		re-init key and extension file fields to struct opie. Added
/root/projects/freebsd-include-mirror/opie.h:		opie_ prefix on struct opie members. Added opie_flags field
/root/projects/freebsd-include-mirror/opie.h:                definition et al. Multiple-include protection. Added struct
/root/projects/freebsd-include-mirror/opie.h:struct opie {
/root/projects/freebsd-include-mirror/opie.h:struct opie_otpkey {
/root/projects/freebsd-include-mirror/opie.h:char *opieatob8 __P((struct opie_otpkey *, char *));
/root/projects/freebsd-include-mirror/opie.h:char *opiebtoa8 __P((char *, struct opie_otpkey *));
/root/projects/freebsd-include-mirror/opie.h:char *opiebtoe __P((char *, struct opie_otpkey *));
/root/projects/freebsd-include-mirror/opie.h:char *opiebtoh __P((char *, struct opie_otpkey *));
/root/projects/freebsd-include-mirror/opie.h:int  opieetob __P((struct opie_otpkey *, char *));
/root/projects/freebsd-include-mirror/opie.h:int  opiechallenge __P((struct opie *,char *,char *));
/root/projects/freebsd-include-mirror/opie.h:int  opiegetsequence __P((struct opie *));
/root/projects/freebsd-include-mirror/opie.h:void opiehash __P((struct opie_otpkey *, unsigned));
/root/projects/freebsd-include-mirror/opie.h:int  opiekeycrunch __P((int, struct opie_otpkey *, char *, char *));
/root/projects/freebsd-include-mirror/opie.h:int  opielookup __P((struct opie *,char *));
/root/projects/freebsd-include-mirror/opie.h:int  opieverify __P((struct opie *,char *));
/root/projects/freebsd-include-mirror/opie.h:int opiepasswd __P((struct opie *, int, char *, int, char *, char *));
/root/projects/freebsd-include-mirror/opie.h:struct utmp;
/root/projects/freebsd-include-mirror/opie.h:int __opiegetutmpentry __P((char *, struct utmp *));
/root/projects/freebsd-include-mirror/opie.h:int __opiereadrec __P((struct opie *));
/root/projects/freebsd-include-mirror/opie.h:int __opiewriterec __P((struct opie *));
/root/projects/freebsd-include-mirror/panel.h:typedef struct panel
/root/projects/freebsd-include-mirror/panel.h:  struct panel *below;
/root/projects/freebsd-include-mirror/panel.h:  struct panel *above;
/root/projects/freebsd-include-mirror/pcap-int.h:struct pcap_sf {
/root/projects/freebsd-include-mirror/pcap-int.h:	int (*next_packet_op)(pcap_t *, struct pcap_pkthdr *, u_char **);
/root/projects/freebsd-include-mirror/pcap-int.h:struct pcap_md {
/root/projects/freebsd-include-mirror/pcap-int.h:	struct pcap_stat stat;
/root/projects/freebsd-include-mirror/pcap-int.h:	struct pcap *next;	/* list of open pcaps that need stuff cleared on close */
/root/projects/freebsd-include-mirror/pcap-int.h:       struct timespec firstsel;
/root/projects/freebsd-include-mirror/pcap-int.h:       struct bpf_zbuf_header *bzh;
/root/projects/freebsd-include-mirror/pcap-int.h:struct pcap_opt {
/root/projects/freebsd-include-mirror/pcap-int.h:typedef int	(*setfilter_op_t)(pcap_t *, struct bpf_program *);
/root/projects/freebsd-include-mirror/pcap-int.h:typedef int	(*stats_op_t)(pcap_t *, struct pcap_stat *);
/root/projects/freebsd-include-mirror/pcap-int.h:struct pcap {
/root/projects/freebsd-include-mirror/pcap-int.h:	struct pcap_sf sf;
/root/projects/freebsd-include-mirror/pcap-int.h:	struct pcap_md md;
/root/projects/freebsd-include-mirror/pcap-int.h:	struct pcap_opt opt;
/root/projects/freebsd-include-mirror/pcap-int.h:	struct bpf_program fcode;
/root/projects/freebsd-include-mirror/pcap-int.h:	struct pcap_pkthdr pcap_header;	/* This is needed for the pcap_next_ex() to work */
/root/projects/freebsd-include-mirror/pcap-int.h: * `struct timeval'; `struct timeval' has 32-bit tv_sec values on some
/root/projects/freebsd-include-mirror/pcap-int.h: * out native `struct timeval' values would mean files could only be
/root/projects/freebsd-include-mirror/pcap-int.h:struct pcap_timeval {
/root/projects/freebsd-include-mirror/pcap-int.h: * Do not change the format of this structure, in any way (this includes
/root/projects/freebsd-include-mirror/pcap-int.h: * changes that only affect the length of fields in this structure),
/root/projects/freebsd-include-mirror/pcap-int.h: *	introduce a new structure for the new format;
/root/projects/freebsd-include-mirror/pcap-int.h:struct pcap_sf_pkthdr {
/root/projects/freebsd-include-mirror/pcap-int.h:    struct pcap_timeval ts;	/* time stamp */
/root/projects/freebsd-include-mirror/pcap-int.h: * Do not change the format of this structure, in any way (this includes
/root/projects/freebsd-include-mirror/pcap-int.h: * changes that only affect the length of fields in this structure).
/root/projects/freebsd-include-mirror/pcap-int.h: * Instead, introduce a new structure, as per the above.
/root/projects/freebsd-include-mirror/pcap-int.h:struct pcap_sf_patched_pkthdr {
/root/projects/freebsd-include-mirror/pcap-int.h:    struct pcap_timeval ts;	/* time stamp */
/root/projects/freebsd-include-mirror/pcap-int.h: * User data structure for the one-shot callback used for pcap_next()
/root/projects/freebsd-include-mirror/pcap-int.h:struct oneshot_userdata {
/root/projects/freebsd-include-mirror/pcap-int.h:	struct pcap_pkthdr *hdr;
/root/projects/freebsd-include-mirror/pcap-int.h:int	add_addr_to_iflist(pcap_if_t **, const char *, u_int, struct sockaddr *,
/root/projects/freebsd-include-mirror/pcap-int.h:	    size_t, struct sockaddr *, size_t, struct sockaddr *, size_t,
/root/projects/freebsd-include-mirror/pcap-int.h:	    struct sockaddr *, size_t, char *);
/root/projects/freebsd-include-mirror/pcap-int.h:struct sockaddr *dup_sockaddr(struct sockaddr *, size_t);
/root/projects/freebsd-include-mirror/pcap-int.h:int	install_bpf_program(pcap_t *, struct bpf_program *);
/root/projects/freebsd-include-mirror/pkcs10_asn1.h:typedef struct heim_integer {
/root/projects/freebsd-include-mirror/pkcs10_asn1.h:typedef struct heim_octet_string {
/root/projects/freebsd-include-mirror/pkcs10_asn1.h:typedef struct heim_bmp_string {
/root/projects/freebsd-include-mirror/pkcs10_asn1.h:typedef struct heim_universal_string {
/root/projects/freebsd-include-mirror/pkcs10_asn1.h:typedef struct heim_oid {
/root/projects/freebsd-include-mirror/pkcs10_asn1.h:typedef struct heim_bit_string {
/root/projects/freebsd-include-mirror/pkcs10_asn1.h:typedef struct heim_octet_string heim_any;
/root/projects/freebsd-include-mirror/pkcs10_asn1.h:typedef struct heim_octet_string heim_any_set;
/root/projects/freebsd-include-mirror/pkcs10_asn1.h:struct units;
/root/projects/freebsd-include-mirror/pkcs10_asn1.h:typedef struct CertificationRequestInfo {
/root/projects/freebsd-include-mirror/pkcs10_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/pkcs10_asn1.h:typedef struct CertificationRequest {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct heim_integer {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct heim_octet_string {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct heim_bmp_string {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct heim_universal_string {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct heim_oid {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct heim_bit_string {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct heim_octet_string heim_any;
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct heim_octet_string heim_any_set;
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:struct units;
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct PKCS12_MacData {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct PKCS12_PFX {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct PKCS12_AuthenticatedSafe {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct PKCS12_Attribute {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct PKCS12_Attributes {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct PKCS12_SafeBag {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct PKCS12_SafeContents {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct PKCS12_CertBag {
/root/projects/freebsd-include-mirror/pkcs12_asn1.h:typedef struct PKCS12_PBEParams {
/root/projects/freebsd-include-mirror/pkcs8_asn1.h:typedef struct heim_integer {
/root/projects/freebsd-include-mirror/pkcs8_asn1.h:typedef struct heim_octet_string {
/root/projects/freebsd-include-mirror/pkcs8_asn1.h:typedef struct heim_bmp_string {
/root/projects/freebsd-include-mirror/pkcs8_asn1.h:typedef struct heim_universal_string {
/root/projects/freebsd-include-mirror/pkcs8_asn1.h:typedef struct heim_oid {
/root/projects/freebsd-include-mirror/pkcs8_asn1.h:typedef struct heim_bit_string {
/root/projects/freebsd-include-mirror/pkcs8_asn1.h:typedef struct heim_octet_string heim_any;
/root/projects/freebsd-include-mirror/pkcs8_asn1.h:typedef struct heim_octet_string heim_any_set;
/root/projects/freebsd-include-mirror/pkcs8_asn1.h:struct units;
/root/projects/freebsd-include-mirror/pkcs8_asn1.h:typedef struct PKCS8Attributes {
/root/projects/freebsd-include-mirror/pkcs8_asn1.h:typedef struct PKCS8PrivateKeyInfo {
/root/projects/freebsd-include-mirror/pkcs8_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/pkcs8_asn1.h:typedef struct PKCS8EncryptedPrivateKeyInfo {
/root/projects/freebsd-include-mirror/pkcs9_asn1.h:typedef struct heim_integer {
/root/projects/freebsd-include-mirror/pkcs9_asn1.h:typedef struct heim_octet_string {
/root/projects/freebsd-include-mirror/pkcs9_asn1.h:typedef struct heim_bmp_string {
/root/projects/freebsd-include-mirror/pkcs9_asn1.h:typedef struct heim_universal_string {
/root/projects/freebsd-include-mirror/pkcs9_asn1.h:typedef struct heim_oid {
/root/projects/freebsd-include-mirror/pkcs9_asn1.h:typedef struct heim_bit_string {
/root/projects/freebsd-include-mirror/pkcs9_asn1.h:typedef struct heim_octet_string heim_any;
/root/projects/freebsd-include-mirror/pkcs9_asn1.h:typedef struct heim_octet_string heim_any_set;
/root/projects/freebsd-include-mirror/pkcs9_asn1.h:struct units;
/root/projects/freebsd-include-mirror/pkcs9_asn1.h:typedef struct PKCS9_friendlyName {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct heim_integer {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct heim_octet_string {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct heim_bmp_string {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct heim_universal_string {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct heim_oid {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct heim_bit_string {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct heim_octet_string heim_any;
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct heim_octet_string heim_any_set;
/root/projects/freebsd-include-mirror/pkinit_asn1.h:struct units;
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct KDFAlgorithmId {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct TrustedCA {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct ExternalPrincipalIdentifier {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct ExternalPrincipalIdentifiers {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct PA_PK_AS_REQ {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct PKAuthenticator {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct AuthPack {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct KRB5PrincipalName {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct AD_INITIAL_VERIFIED_CAS {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct DHRepInfo {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct PA_PK_AS_REP {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct KDCDHKeyInfo {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct ReplyKeyPack {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct TD_DH_PARAMETERS {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct PKAuthenticator_Win2k {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct AuthPack_Win2k {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct TrustedCA_Win2k {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct PA_PK_AS_REQ_Win2k {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct PA_PK_AS_REP_Win2k {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct KDCDHKeyInfo_Win2k {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct ReplyKeyPack_Win2k {
/root/projects/freebsd-include-mirror/pkinit_asn1.h:typedef struct PkinitSuppPubInfo {
/root/projects/freebsd-include-mirror/pmc.h:struct pmc_driverstats {
/root/projects/freebsd-include-mirror/pmc.h:struct pmc_cpuinfo {
/root/projects/freebsd-include-mirror/pmc.h:	struct pmc_classinfo pm_classes[PMC_CLASS_MAX];
/root/projects/freebsd-include-mirror/pmc.h:struct pmc_pmcinfo {
/root/projects/freebsd-include-mirror/pmc.h:	struct pmc_info	pm_pmcs[];	/* NPMC structs */
/root/projects/freebsd-include-mirror/pmc.h:int	pmc_get_driver_stats(struct pmc_driverstats *_gms);
/root/projects/freebsd-include-mirror/pmc.h:int	pmc_cpuinfo(const struct pmc_cpuinfo **_cpu_info);
/root/projects/freebsd-include-mirror/pmc.h:int	pmc_pmcinfo(int _cpu, struct pmc_pmcinfo **_pmc_info);
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_callchain {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_dropnotify {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_closelog {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_initialize {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_map_in {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_map_out {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_pcsample {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_pmcallocate {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_pmcattach {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_pmcdetach {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_proccsw {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_procexec {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_procexit {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_procfork {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_sysexit {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev_userdata {
/root/projects/freebsd-include-mirror/pmclog.h:struct pmclog_ev {
/root/projects/freebsd-include-mirror/pmclog.h:	struct timespec   pl_ts;	/* log entry timestamp */
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_callchain	pl_cc;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_closelog	pl_cl;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_dropnotify	pl_dn;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_initialize	pl_i;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_map_in		pl_mi;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_map_out	pl_mo;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_pcsample	pl_s;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_pmcallocate	pl_a;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_pmcattach	pl_t;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_pmcdetach	pl_d;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_proccsw	pl_c;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_procexec	pl_x;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_procexit	pl_e;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_procfork	pl_f;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_sysexit	pl_se;
/root/projects/freebsd-include-mirror/pmclog.h:		struct pmclog_ev_userdata	pl_u;
/root/projects/freebsd-include-mirror/pmclog.h:int	pmclog_read(void *_cookie, struct pmclog_ev *_ev);
/root/projects/freebsd-include-mirror/poll.h: * This structure is passed as an array to poll(2).
/root/projects/freebsd-include-mirror/poll.h:struct pollfd {
/root/projects/freebsd-include-mirror/poll.h:int	poll(struct pollfd _pfd[], nfds_t _nfds, int _timeout);
/root/projects/freebsd-include-mirror/printf.h:struct printf_info {
/root/projects/freebsd-include-mirror/printf.h:typedef int printf_arginfo_function(const struct printf_info *, size_t, int *);
/root/projects/freebsd-include-mirror/printf.h:typedef int printf_function(FILE *, const struct printf_info *, const void *const *);
/root/projects/freebsd-include-mirror/printf.h:struct __printf_io;
/root/projects/freebsd-include-mirror/printf.h:typedef int printf_render(struct __printf_io *, const struct printf_info *, const void *const *);
/root/projects/freebsd-include-mirror/printf.h:void __printf_flush(struct __printf_io *io);
/root/projects/freebsd-include-mirror/printf.h:int __printf_puts(struct __printf_io *io, const void *ptr, int len);
/root/projects/freebsd-include-mirror/printf.h:int __printf_pad(struct __printf_io *io, int n, int zero);
/root/projects/freebsd-include-mirror/printf.h:int __printf_out(struct __printf_io *io, const struct printf_info *pi, const void *ptr, int len);
/root/projects/freebsd-include-mirror/proc_service.h:struct ps_prochandle;		/* Opaque type. Defined by the implementor. */
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_lcontinue(struct ps_prochandle *, lwpid_t);
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_lgetfpregs(struct ps_prochandle *, lwpid_t, prfpregset_t *);
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_lgetregs(struct ps_prochandle *, lwpid_t, prgregset_t);
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_lsetfpregs(struct ps_prochandle *, lwpid_t, const prfpregset_t *);
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_lsetregs(struct ps_prochandle *, lwpid_t, const prgregset_t);
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_lgetxmmregs (struct ps_prochandle *, lwpid_t, char *);
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_lsetxmmregs (struct ps_prochandle *, lwpid_t, const char *);
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_lstop(struct ps_prochandle *, lwpid_t);
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_linfo(struct ps_prochandle *, lwpid_t, void *);
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_pcontinue(struct ps_prochandle *);
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_pdmodel(struct ps_prochandle *, int *);
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_pglobal_lookup(struct ps_prochandle *, const char *, const char *,
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_pread(struct ps_prochandle *, psaddr_t, void *, size_t);
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_pstop(struct ps_prochandle *);
/root/projects/freebsd-include-mirror/proc_service.h:ps_err_e ps_pwrite(struct ps_prochandle *, psaddr_t, const void *, size_t);
/root/projects/freebsd-include-mirror/pthread.h:struct _pthread_cleanup_info {
/root/projects/freebsd-include-mirror/pthread.h:			struct _pthread_cleanup_info __cleanup_info__;		\
/root/projects/freebsd-include-mirror/pthread.h:			pthread_mutex_t *, const struct timespec *);
/root/projects/freebsd-include-mirror/pthread.h:			const struct timespec *);
/root/projects/freebsd-include-mirror/pthread.h:			const struct timespec *);
/root/projects/freebsd-include-mirror/pthread.h:			const struct timespec *);
/root/projects/freebsd-include-mirror/pthread.h:			struct sched_param *);
/root/projects/freebsd-include-mirror/pthread.h:			const struct sched_param *);
/root/projects/freebsd-include-mirror/pthread.h:			struct sched_param *);
/root/projects/freebsd-include-mirror/pthread.h:			const struct sched_param *);
/root/projects/freebsd-include-mirror/pthread.h:			struct _pthread_cleanup_info *);
/root/projects/freebsd-include-mirror/pthread_np.h:int pthread_timedjoin_np(pthread_t, void **, const struct timespec *);
/root/projects/freebsd-include-mirror/pwd.h:struct passwd {
/root/projects/freebsd-include-mirror/pwd.h:struct passwd	*getpwnam(const char *);
/root/projects/freebsd-include-mirror/pwd.h:struct passwd	*getpwuid(uid_t);
/root/projects/freebsd-include-mirror/pwd.h:struct passwd	*getpwent(void);
/root/projects/freebsd-include-mirror/pwd.h:int		 getpwnam_r(const char *, struct passwd *, char *, size_t,
/root/projects/freebsd-include-mirror/pwd.h:		    struct passwd **);
/root/projects/freebsd-include-mirror/pwd.h:int		 getpwuid_r(uid_t, struct passwd *, char *, size_t,
/root/projects/freebsd-include-mirror/pwd.h:		    struct passwd **);
/root/projects/freebsd-include-mirror/pwd.h:int		 getpwent_r(struct passwd *, char *, size_t, struct passwd **);
/root/projects/freebsd-include-mirror/radlib.h:struct rad_handle;
/root/projects/freebsd-include-mirror/radlib.h:struct timeval;
/root/projects/freebsd-include-mirror/radlib.h:struct rad_handle	*rad_acct_open(void);
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_add_server(struct rad_handle *,
/root/projects/freebsd-include-mirror/radlib.h:struct rad_handle	*rad_auth_open(void);
/root/projects/freebsd-include-mirror/radlib.h:void			 rad_close(struct rad_handle *);
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_config(struct rad_handle *, const char *);
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_continue_send_request(struct rad_handle *, int,
/root/projects/freebsd-include-mirror/radlib.h:			    int *, struct timeval *);
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_create_request(struct rad_handle *, int);
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_create_response(struct rad_handle *, int);
/root/projects/freebsd-include-mirror/radlib.h:struct in_addr		 rad_cvt_addr(const void *);
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_get_attr(struct rad_handle *, const void **,
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_init_send_request(struct rad_handle *, int *,
/root/projects/freebsd-include-mirror/radlib.h:			    struct timeval *);
/root/projects/freebsd-include-mirror/radlib.h:struct rad_handle	*rad_open(void);  /* Deprecated, == rad_auth_open */
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_put_addr(struct rad_handle *, int, struct in_addr);
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_put_attr(struct rad_handle *, int,
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_put_int(struct rad_handle *, int, u_int32_t);
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_put_string(struct rad_handle *, int,
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_put_message_authentic(struct rad_handle *);
/root/projects/freebsd-include-mirror/radlib.h:ssize_t			 rad_request_authenticator(struct rad_handle *, char *,
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_receive_request(struct rad_handle *);
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_send_request(struct rad_handle *);
/root/projects/freebsd-include-mirror/radlib.h:int			 rad_send_response(struct rad_handle *);
/root/projects/freebsd-include-mirror/radlib.h:struct rad_handle	*rad_server_open(int fd);
/root/projects/freebsd-include-mirror/radlib.h:const char		*rad_server_secret(struct rad_handle *);
/root/projects/freebsd-include-mirror/radlib.h:const char		*rad_strerror(struct rad_handle *);
/root/projects/freebsd-include-mirror/radlib.h:u_char			*rad_demangle(struct rad_handle *, const void *,
/root/projects/freebsd-include-mirror/radlib_vs.h:struct rad_handle;
/root/projects/freebsd-include-mirror/radlib_vs.h:int	 rad_put_vendor_addr(struct rad_handle *, int, int, struct in_addr);
/root/projects/freebsd-include-mirror/radlib_vs.h:int	 rad_put_vendor_attr(struct rad_handle *, int, int, const void *,
/root/projects/freebsd-include-mirror/radlib_vs.h:int	 rad_put_vendor_int(struct rad_handle *, int, int, u_int32_t);
/root/projects/freebsd-include-mirror/radlib_vs.h:int	 rad_put_vendor_string(struct rad_handle *, int, int, const char *);
/root/projects/freebsd-include-mirror/radlib_vs.h:u_char	*rad_demangle_mppe_key(struct rad_handle *, const void *, size_t,
/root/projects/freebsd-include-mirror/ranlib.h:struct ranlib {
/root/projects/freebsd-include-mirror/regex.h:typedef struct {
/root/projects/freebsd-include-mirror/regex.h:	struct re_guts *re_g;	/* none of your business :-) */
/root/projects/freebsd-include-mirror/regex.h:typedef struct {
/root/projects/freebsd-include-mirror/resolv.h:struct __res_state; /*%< forward */
/root/projects/freebsd-include-mirror/resolv.h:void __h_errno_set(struct __res_state *, int);
/root/projects/freebsd-include-mirror/resolv.h:typedef res_sendhookact (*res_send_qhook)(struct sockaddr * const *,
/root/projects/freebsd-include-mirror/resolv.h:typedef res_sendhookact (*res_send_rhook)(const struct sockaddr *,
/root/projects/freebsd-include-mirror/resolv.h:struct res_sym {
/root/projects/freebsd-include-mirror/resolv.h:struct __res_state_ext;
/root/projects/freebsd-include-mirror/resolv.h:struct __res_state {
/root/projects/freebsd-include-mirror/resolv.h:	struct sockaddr_in
/root/projects/freebsd-include-mirror/resolv.h:	struct {
/root/projects/freebsd-include-mirror/resolv.h:		struct in_addr	addr;
/root/projects/freebsd-include-mirror/resolv.h:		struct {
/root/projects/freebsd-include-mirror/resolv.h:			struct __res_state_ext *ext;	/*%< extention for IPv6 */
/root/projects/freebsd-include-mirror/resolv.h:typedef struct __res_state *res_state;
/root/projects/freebsd-include-mirror/resolv.h:	struct sockaddr_in	sin;
/root/projects/freebsd-include-mirror/resolv.h:	struct sockaddr_in6	sin6;
/root/projects/freebsd-include-mirror/resolv.h:extern struct __res_state *__res_state(void);
/root/projects/freebsd-include-mirror/resolv.h:int		res_isourserver(const struct sockaddr_in *);
/root/projects/freebsd-include-mirror/resolv.h:extern const struct res_sym __p_key_syms[];
/root/projects/freebsd-include-mirror/resolv.h:extern const struct res_sym __p_cert_syms[];
/root/projects/freebsd-include-mirror/resolv.h:extern const struct res_sym __p_class_syms[];
/root/projects/freebsd-include-mirror/resolv.h:extern const struct res_sym __p_type_syms[];
/root/projects/freebsd-include-mirror/resolv.h:extern const struct res_sym __p_rcode_syms[];
/root/projects/freebsd-include-mirror/resolv.h:int		sym_ston(const struct res_sym *, const char *, int *);
/root/projects/freebsd-include-mirror/resolv.h:const char *	sym_ntos(const struct res_sym *, int, int *);
/root/projects/freebsd-include-mirror/resolv.h:const char *	sym_ntop(const struct res_sym *, int, int *);
/root/projects/freebsd-include-mirror/resolv.h:int		res_nisourserver(const res_state, const struct sockaddr_in *);
/root/projects/freebsd-include-mirror/resolv.h:				char *, size_t, struct in_addr *, int);
/root/projects/freebsd-include-mirror/res_update.h: * This RR-like structure is particular to UPDATE.
/root/projects/freebsd-include-mirror/res_update.h:struct ns_updrec {
/root/projects/freebsd-include-mirror/res_update.h:	struct {
/root/projects/freebsd-include-mirror/res_update.h:		struct ns_updrec *prev;
/root/projects/freebsd-include-mirror/res_update.h:		struct ns_updrec *next;
/root/projects/freebsd-include-mirror/res_update.h:	struct databuf *r_dp;		/*%< databuf to process */
/root/projects/freebsd-include-mirror/res_update.h:	struct databuf *r_deldp;	/*%< databuf's deleted/overwritten */
/root/projects/freebsd-include-mirror/res_update.h:typedef struct ns_updrec ns_updrec;
/root/projects/freebsd-include-mirror/res_update.h:typedef struct {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct heim_integer {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct heim_octet_string {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct heim_bmp_string {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct heim_universal_string {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct heim_oid {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct heim_bit_string {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct heim_octet_string heim_any;
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct heim_octet_string heim_any_set;
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:struct units;
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct AlgorithmIdentifier {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct DirectoryString {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct Attribute {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct AttributeTypeAndValue {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct RelativeDistinguishedName {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct RDNSequence {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct Name {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct Time {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct Validity {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct SubjectPublicKeyInfo {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct Extension {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct Extensions {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct TBSCertificate {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct Certificate {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct Certificates {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct ValidationParms {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct DomainParameters {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct OtherName {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct GeneralName {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:    struct  {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:    struct  {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct GeneralNames {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct KeyUsage {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:const struct units * asn1_KeyUsage_units(void);
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct AuthorityKeyIdentifier {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct BasicConstraints {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct GeneralSubtree {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct GeneralSubtrees {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct NameConstraints {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct ExtKeyUsage {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:/* OBJECT IDENTIFIER id-x509-ce-holdInstructionCode ::= { joint-iso-ccitt(2) ds(5) label-less(29) label-less(23) } */
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:const heim_oid *oid_id_x509_ce_holdInstructionCode(void);
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct DistributionPointReasonFlags {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:const struct units * asn1_DistributionPointReasonFlags_units(void);
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct DistributionPointName {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:    struct  {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct DistributionPoint {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct CRLDistributionPoints {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct DSASigValue {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct DSAParams {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct RSAPublicKey {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct RSAPrivateKey {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct DigestInfo {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct TBSCRLCertList {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:  struct  {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:    struct  {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct CRLCertificateList {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct AccessDescription {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct AuthorityInfoAccessSyntax {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct ProxyPolicy {
/root/projects/freebsd-include-mirror/rfc2459_asn1.h:typedef struct ProxyCertInfo {
/root/projects/freebsd-include-mirror/ripemd.h:typedef struct RIPEMD160state_st {
/root/projects/freebsd-include-mirror/roken-common.h:struct hostent;
/root/projects/freebsd-include-mirror/roken-common.h:hostent_find_fqdn (const struct hostent *);
/root/projects/freebsd-include-mirror/roken-common.h:socket_set_address_and_port (struct sockaddr *, const void *, int);
/root/projects/freebsd-include-mirror/roken-common.h:socket_addr_size (const struct sockaddr *);
/root/projects/freebsd-include-mirror/roken-common.h:socket_set_any (struct sockaddr *, int);
/root/projects/freebsd-include-mirror/roken-common.h:socket_sockaddr_size (const struct sockaddr *);
/root/projects/freebsd-include-mirror/roken-common.h:socket_get_address (struct sockaddr *);
/root/projects/freebsd-include-mirror/roken-common.h:socket_get_port (const struct sockaddr *);
/root/projects/freebsd-include-mirror/roken-common.h:socket_set_port (struct sockaddr *, int);
/root/projects/freebsd-include-mirror/roken-common.h:timevalfix(struct timeval *t1);
/root/projects/freebsd-include-mirror/roken-common.h:timevaladd(struct timeval *t1, const struct timeval *t2);
/root/projects/freebsd-include-mirror/roken-common.h:timevalsub(struct timeval *t1, const struct timeval *t2);
/root/projects/freebsd-include-mirror/roken-common.h:struct rk_strpool;
/root/projects/freebsd-include-mirror/roken-common.h:rk_strpoolcollect(struct rk_strpool *);
/root/projects/freebsd-include-mirror/roken-common.h:struct rk_strpool * ROKEN_LIB_FUNCTION
/root/projects/freebsd-include-mirror/roken-common.h:rk_strpoolprintf(struct rk_strpool *, const char *, ...)
/root/projects/freebsd-include-mirror/roken-common.h:rk_strpoolfree(struct rk_strpool *);
/root/projects/freebsd-include-mirror/roken.h:struct passwd * ROKEN_LIB_FUNCTION k_getpwnam (const char *);
/root/projects/freebsd-include-mirror/roken.h:struct passwd * ROKEN_LIB_FUNCTION k_getpwuid (uid_t);
/root/projects/freebsd-include-mirror/roken.h:time_t ROKEN_LIB_FUNCTION tm2time (struct tm, int);
/root/projects/freebsd-include-mirror/roken.h:int ROKEN_LIB_FUNCTION get_window_size(int fd, struct winsize *);
/root/projects/freebsd-include-mirror/roken.h:struct hostent * ROKEN_LIB_FUNCTION
/root/projects/freebsd-include-mirror/roken.h:copyhostent (const struct hostent *);
/root/projects/freebsd-include-mirror/roken.h:getnameinfo_verified(const struct sockaddr *, socklen_t,
/root/projects/freebsd-include-mirror/roken.h:roken_getaddrinfo_hostspec(const char *, int, struct addrinfo **); 
/root/projects/freebsd-include-mirror/roken.h:roken_getaddrinfo_hostspec2(const char *, int, int, struct addrinfo **);
/root/projects/freebsd-include-mirror/roken.h:struct hostent* ROKEN_LIB_FUNCTION
/root/projects/freebsd-include-mirror/roken.h:struct hostent* ROKEN_LIB_FUNCTION 
/root/projects/freebsd-include-mirror/roken.h:void ROKEN_LIB_FUNCTION mini_inetd_addrinfo (struct addrinfo*);
/root/projects/freebsd-include-mirror/rtld_db.h:typedef struct rd_agent {
/root/projects/freebsd-include-mirror/rtld_db.h:	struct proc_handle *rda_php;
/root/projects/freebsd-include-mirror/rtld_db.h:typedef struct rd_loadobj {
/root/projects/freebsd-include-mirror/rtld_db.h:typedef struct rd_notify {
/root/projects/freebsd-include-mirror/rtld_db.h:typedef struct rd_event_msg {
/root/projects/freebsd-include-mirror/rtld_db.h:typedef struct rd_plt_info {
/root/projects/freebsd-include-mirror/rtld_db.h:struct proc_handle;
/root/projects/freebsd-include-mirror/rtld_db.h:rd_agent_t 	*rd_new(struct proc_handle *);
/root/projects/freebsd-include-mirror/rtld_db.h:struct proc;
/root/projects/freebsd-include-mirror/rtld_db.h:rd_err_e	rd_plt_resolution(rd_agent_t *, uintptr_t, struct proc *,
/root/projects/freebsd-include-mirror/runetype.h:typedef struct {
/root/projects/freebsd-include-mirror/runetype.h:typedef struct {
/root/projects/freebsd-include-mirror/runetype.h:typedef struct {
/root/projects/freebsd-include-mirror/runetype.h:	 * Their data is actually contiguous with this structure so as to make
/root/projects/freebsd-include-mirror/sched.h:void	sched_exit(struct proc *p, struct thread *childtd);
/root/projects/freebsd-include-mirror/sched.h:void	sched_fork(struct thread *td, struct thread *childtd);
/root/projects/freebsd-include-mirror/sched.h:void	sched_fork_exit(struct thread *td);
/root/projects/freebsd-include-mirror/sched.h:void	sched_class(struct thread *td, int class);
/root/projects/freebsd-include-mirror/sched.h:void	sched_nice(struct proc *p, int nice);
/root/projects/freebsd-include-mirror/sched.h:void	sched_exit_thread(struct thread *td, struct thread *child);
/root/projects/freebsd-include-mirror/sched.h:void	sched_fork_thread(struct thread *td, struct thread *child);
/root/projects/freebsd-include-mirror/sched.h:void	sched_lend_prio(struct thread *td, u_char prio);
/root/projects/freebsd-include-mirror/sched.h:void	sched_lend_user_prio(struct thread *td, u_char pri);
/root/projects/freebsd-include-mirror/sched.h:fixpt_t	sched_pctcpu(struct thread *td);
/root/projects/freebsd-include-mirror/sched.h:void	sched_prio(struct thread *td, u_char prio);
/root/projects/freebsd-include-mirror/sched.h:void	sched_sleep(struct thread *td, int prio);
/root/projects/freebsd-include-mirror/sched.h:void	sched_switch(struct thread *td, struct thread *newtd, int flags);
/root/projects/freebsd-include-mirror/sched.h:void	sched_throw(struct thread *td);
/root/projects/freebsd-include-mirror/sched.h:void	sched_unlend_prio(struct thread *td, u_char prio);
/root/projects/freebsd-include-mirror/sched.h:void	sched_user_prio(struct thread *td, u_char prio);
/root/projects/freebsd-include-mirror/sched.h:void	sched_userret(struct thread *td);
/root/projects/freebsd-include-mirror/sched.h:void	sched_wakeup(struct thread *td);
/root/projects/freebsd-include-mirror/sched.h:void	sched_preempt(struct thread *td);
/root/projects/freebsd-include-mirror/sched.h:void	sched_add(struct thread *td, int flags);
/root/projects/freebsd-include-mirror/sched.h:void	sched_clock(struct thread *td);
/root/projects/freebsd-include-mirror/sched.h:void	sched_rem(struct thread *td);
/root/projects/freebsd-include-mirror/sched.h:void	sched_relinquish(struct thread *td);
/root/projects/freebsd-include-mirror/sched.h:struct thread *sched_choose(void);
/root/projects/freebsd-include-mirror/sched.h:void	sched_bind(struct thread *td, int cpu);
/root/projects/freebsd-include-mirror/sched.h:void	sched_unbind(struct thread *td);
/root/projects/freebsd-include-mirror/sched.h:int	sched_is_bound(struct thread *td);
/root/projects/freebsd-include-mirror/sched.h:void	sched_affinity(struct thread *td);
/root/projects/freebsd-include-mirror/sched.h: * These procedures tell the process data structure allocation code how
/root/projects/freebsd-include-mirror/sched.h:char	*sched_tdname(struct thread *td);
/root/projects/freebsd-include-mirror/sched.h:struct sched_param {
/root/projects/freebsd-include-mirror/sched.h:struct timespec;
/root/projects/freebsd-include-mirror/sched.h:int     sched_getparam(pid_t, struct sched_param *);
/root/projects/freebsd-include-mirror/sched.h:int     sched_rr_get_interval(pid_t, struct timespec *);
/root/projects/freebsd-include-mirror/sched.h:int     sched_setparam(pid_t, const struct sched_param *);
/root/projects/freebsd-include-mirror/sched.h:int     sched_setscheduler(pid_t, int, const struct sched_param *);
/root/projects/freebsd-include-mirror/sdp.h:struct sdp_pdu {
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_pdu		sdp_pdu_t;
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_pdu *	sdp_pdu_p;
/root/projects/freebsd-include-mirror/sdp.h:struct int128 {
/root/projects/freebsd-include-mirror/sdp.h:typedef struct int128	int128_t;
/root/projects/freebsd-include-mirror/sdp.h:typedef struct int128	uint128_t;
/root/projects/freebsd-include-mirror/sdp.h:struct sdp_attr {
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_attr		sdp_attr_t;
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_attr *	sdp_attr_p;
/root/projects/freebsd-include-mirror/sdp.h:struct sdp_dun_profile
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_dun_profile		sdp_dun_profile_t;
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_dun_profile *	sdp_dun_profile_p;
/root/projects/freebsd-include-mirror/sdp.h:struct sdp_ftrn_profile
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_ftrn_profile		sdp_ftrn_profile_t;
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_ftrn_profile *	sdp_ftrn_profile_p;
/root/projects/freebsd-include-mirror/sdp.h:struct sdp_irmc_profile
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_irmc_profile		sdp_irmc_profile_t;
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_irmc_profile *	sdp_irmc_profile_p;
/root/projects/freebsd-include-mirror/sdp.h:struct sdp_irmc_command_profile
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_irmc_command_profile		sdp_irmc_command_profile_t;
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_irmc_command_profile *	sdp_irmc_command_profile_p;
/root/projects/freebsd-include-mirror/sdp.h:struct sdp_lan_profile
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_lan_profile		sdp_lan_profile_t;
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_lan_profile *	sdp_lan_profile_p;
/root/projects/freebsd-include-mirror/sdp.h:struct sdp_opush_profile
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_opush_profile	sdp_opush_profile_t;
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_opush_profile *	sdp_opush_profile_p;
/root/projects/freebsd-include-mirror/sdp.h:struct sdp_sp_profile
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_sp_profile	sdp_sp_profile_t;
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_sp_profile *	sdp_sp_profile_p;
/root/projects/freebsd-include-mirror/sdp.h:struct sdp_nap_profile
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_nap_profile		sdp_nap_profile_t;
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_nap_profile *	sdp_nap_profile_p;
/root/projects/freebsd-include-mirror/sdp.h:struct sdp_gn_profile
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_gn_profile		sdp_gn_profile_t;
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_gn_profile *		sdp_gn_profile_p;
/root/projects/freebsd-include-mirror/sdp.h:struct sdp_panu_profile
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_panu_profile		sdp_panu_profile_t;
/root/projects/freebsd-include-mirror/sdp.h:typedef struct sdp_panu_profile *	sdp_panu_profile_p;
/root/projects/freebsd-include-mirror/search.h:typedef	struct entry {
/root/projects/freebsd-include-mirror/search.h:typedef	struct node {
/root/projects/freebsd-include-mirror/search.h:	struct node  *llink, *rlink;
/root/projects/freebsd-include-mirror/search.h:struct que_elem {
/root/projects/freebsd-include-mirror/search.h:	struct que_elem *next;
/root/projects/freebsd-include-mirror/search.h:	struct que_elem *prev;
/root/projects/freebsd-include-mirror/_semaphore.h:struct timespec;
/root/projects/freebsd-include-mirror/_semaphore.h:int ksem_timedwait(semid_t id, const struct timespec *abstime);
/root/projects/freebsd-include-mirror/semaphore.h:struct _sem {
/root/projects/freebsd-include-mirror/semaphore.h:	struct _usem	_kern;
/root/projects/freebsd-include-mirror/semaphore.h:typedef	struct _sem	sem_t;
/root/projects/freebsd-include-mirror/semaphore.h:struct timespec;
/root/projects/freebsd-include-mirror/semaphore.h:int	 sem_timedwait(sem_t * __restrict, const struct timespec * __restrict);
/root/projects/freebsd-include-mirror/sha256.h:typedef struct SHA256Context {
/root/projects/freebsd-include-mirror/sha512.h:typedef struct SHA512Context {
/root/projects/freebsd-include-mirror/sha.h:typedef struct SHAstate_st {
/root/projects/freebsd-include-mirror/signal.h:struct pthread;		/* XXX */
/root/projects/freebsd-include-mirror/signal.h:typedef struct pthread *__pthread_t;
/root/projects/freebsd-include-mirror/signal.h:int	sigaction(int, const struct sigaction * __restrict,
/root/projects/freebsd-include-mirror/signal.h:	    struct sigaction * __restrict);
/root/projects/freebsd-include-mirror/signal.h:struct timespec;
/root/projects/freebsd-include-mirror/signal.h:	    const struct timespec * __restrict);
/root/projects/freebsd-include-mirror/signal.h:struct __ucontext;		/* XXX spec requires a complete declaration. */
/root/projects/freebsd-include-mirror/signal.h:int	sigreturn(const struct __ucontext *);
/root/projects/freebsd-include-mirror/signal.h:int	sigstack(const struct sigstack *, struct sigstack *);
/root/projects/freebsd-include-mirror/signal.h:int	sigvec(int, struct sigvec *, struct sigvec *);
/root/projects/freebsd-include-mirror/spawn.h:struct sched_param;
/root/projects/freebsd-include-mirror/spawn.h:typedef struct __posix_spawnattr		*posix_spawnattr_t;
/root/projects/freebsd-include-mirror/spawn.h:typedef struct __posix_spawn_file_actions	*posix_spawn_file_actions_t;
/root/projects/freebsd-include-mirror/spawn.h:    struct sched_param * __restrict);
/root/projects/freebsd-include-mirror/spawn.h:    const struct sched_param * __restrict);
/root/projects/freebsd-include-mirror/stab.h:#define	N_SSYM		0x60	/* structure/union element */
/root/projects/freebsd-include-mirror/stand.h:struct open_file;
/root/projects/freebsd-include-mirror/stand.h: * This structure is used to define file system operations in a file system
/root/projects/freebsd-include-mirror/stand.h: *     struct, so that consumers can reference this and thus include the
/root/projects/freebsd-include-mirror/stand.h:struct fs_ops {
/root/projects/freebsd-include-mirror/stand.h:    int		(*fo_open)(const char *path, struct open_file *f);
/root/projects/freebsd-include-mirror/stand.h:    int		(*fo_close)(struct open_file *f);
/root/projects/freebsd-include-mirror/stand.h:    int		(*fo_read)(struct open_file *f, void *buf,
/root/projects/freebsd-include-mirror/stand.h:    int		(*fo_write)(struct open_file *f, void *buf,
/root/projects/freebsd-include-mirror/stand.h:    off_t	(*fo_seek)(struct open_file *f, off_t offset, int where);
/root/projects/freebsd-include-mirror/stand.h:    int		(*fo_stat)(struct open_file *f, struct stat *sb);
/root/projects/freebsd-include-mirror/stand.h:    int		(*fo_readdir)(struct open_file *f, struct dirent *d);
/root/projects/freebsd-include-mirror/stand.h:extern struct fs_ops ufs_fsops;
/root/projects/freebsd-include-mirror/stand.h:extern struct fs_ops tftp_fsops;
/root/projects/freebsd-include-mirror/stand.h:extern struct fs_ops nfs_fsops;
/root/projects/freebsd-include-mirror/stand.h:extern struct fs_ops cd9660_fsops;
/root/projects/freebsd-include-mirror/stand.h:extern struct fs_ops gzipfs_fsops;
/root/projects/freebsd-include-mirror/stand.h:extern struct fs_ops bzipfs_fsops;
/root/projects/freebsd-include-mirror/stand.h:extern struct fs_ops dosfs_fsops;
/root/projects/freebsd-include-mirror/stand.h:extern struct fs_ops ext2fs_fsops;
/root/projects/freebsd-include-mirror/stand.h:extern struct fs_ops splitfs_fsops;
/root/projects/freebsd-include-mirror/stand.h:struct devsw {
/root/projects/freebsd-include-mirror/stand.h:    int		(*dv_open)(struct open_file *f, ...);
/root/projects/freebsd-include-mirror/stand.h:    int		(*dv_close)(struct open_file *f);
/root/projects/freebsd-include-mirror/stand.h:    int		(*dv_ioctl)(struct open_file *f, u_long cmd, void *data);
/root/projects/freebsd-include-mirror/stand.h:extern struct devsw netdev;
/root/projects/freebsd-include-mirror/stand.h:struct open_file {
/root/projects/freebsd-include-mirror/stand.h:    struct devsw	*f_dev;		/* pointer to device operations */
/root/projects/freebsd-include-mirror/stand.h:    struct fs_ops	*f_ops;		/* pointer to file system operations */
/root/projects/freebsd-include-mirror/stand.h:extern struct open_file files[];
/root/projects/freebsd-include-mirror/stand.h:extern struct	dirent *readdirfd(int);
/root/projects/freebsd-include-mirror/stand.h:struct env_var;
/root/projects/freebsd-include-mirror/stand.h:typedef char	*(ev_format_t)(struct env_var *ev);
/root/projects/freebsd-include-mirror/stand.h:typedef int	(ev_sethook_t)(struct env_var *ev, int flags,
/root/projects/freebsd-include-mirror/stand.h:typedef int	(ev_unsethook_t)(struct env_var *ev);
/root/projects/freebsd-include-mirror/stand.h:struct env_var
/root/projects/freebsd-include-mirror/stand.h:    struct env_var	*ev_next, *ev_prev;
/root/projects/freebsd-include-mirror/stand.h:extern struct env_var	*environ;
/root/projects/freebsd-include-mirror/stand.h:extern struct env_var	*env_getenv(const char *name);
/root/projects/freebsd-include-mirror/stand.h:extern int	noioctl(struct open_file *, u_long, void *);
/root/projects/freebsd-include-mirror/stand.h:extern int	null_open(const char *path, struct open_file *f);
/root/projects/freebsd-include-mirror/stand.h:extern int	null_close(struct open_file *f);
/root/projects/freebsd-include-mirror/stand.h:extern int	null_read(struct open_file *f, void *buf, size_t size, size_t *resid);
/root/projects/freebsd-include-mirror/stand.h:extern int	null_write(struct open_file *f, void *buf, size_t size, size_t *resid);
/root/projects/freebsd-include-mirror/stand.h:extern off_t	null_seek(struct open_file *f, off_t offset, int where);
/root/projects/freebsd-include-mirror/stand.h:extern int	null_stat(struct open_file *f, struct stat *sb);
/root/projects/freebsd-include-mirror/stand.h:extern int	null_readdir(struct open_file *f, struct dirent *d);
/root/projects/freebsd-include-mirror/stand.h:extern int		devopen(struct open_file *, const char *, const char **);
/root/projects/freebsd-include-mirror/stand.h:extern int		devclose(struct open_file *f);
/root/projects/freebsd-include-mirror/stand.h:extern struct fs_ops	*file_system[];
/root/projects/freebsd-include-mirror/stand.h:extern struct devsw	*devsw[];
/root/projects/freebsd-include-mirror/stdio.h:struct __sbuf {
/root/projects/freebsd-include-mirror/stdio.h:typedef	struct __sFILE {
/root/projects/freebsd-include-mirror/stdio.h:	struct	__sbuf _bf;	/* (*) the buffer (at least 1 byte, if !NULL) */
/root/projects/freebsd-include-mirror/stdio.h:	struct	__sbuf _ub;	/* ungetc buffer */
/root/projects/freebsd-include-mirror/stdio.h:	struct	__sbuf _lb;	/* buffer for fgetln() */
/root/projects/freebsd-include-mirror/stdio.h:	struct pthread_mutex *_fl_mutex;	/* used for MT-safety */
/root/projects/freebsd-include-mirror/stdio.h:	struct pthread *_fl_owner;	/* current owner */
/root/projects/freebsd-include-mirror/stdlib.h:typedef struct {
/root/projects/freebsd-include-mirror/stdlib.h:typedef struct {
/root/projects/freebsd-include-mirror/stdlib.h:typedef struct {
/root/projects/freebsd-include-mirror/stringlist.h:typedef struct _stringlist {
/root/projects/freebsd-include-mirror/syslog.h:typedef struct _code {
/root/projects/freebsd-include-mirror/taclib.h:struct tac_handle;
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_add_server(struct tac_handle *,
/root/projects/freebsd-include-mirror/taclib.h:void			 tac_close(struct tac_handle *);
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_config(struct tac_handle *, const char *);
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_create_authen(struct tac_handle *, int, int, int);
/root/projects/freebsd-include-mirror/taclib.h:void			*tac_get_data(struct tac_handle *, size_t *);
/root/projects/freebsd-include-mirror/taclib.h:char			*tac_get_msg(struct tac_handle *);
/root/projects/freebsd-include-mirror/taclib.h:struct tac_handle	*tac_open(void);
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_send_authen(struct tac_handle *);
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_set_data(struct tac_handle *,
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_set_msg(struct tac_handle *, const char *);
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_set_port(struct tac_handle *, const char *);
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_set_priv(struct tac_handle *, int);
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_set_rem_addr(struct tac_handle *, const char *);
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_set_user(struct tac_handle *, const char *);
/root/projects/freebsd-include-mirror/taclib.h:const char		*tac_strerror(struct tac_handle *);
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_send_author(struct tac_handle *);
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_create_author(struct tac_handle *, int, int, int);
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_set_av(struct tac_handle *, u_int, const char *);
/root/projects/freebsd-include-mirror/taclib.h:char			*tac_get_av(struct tac_handle *, u_int);
/root/projects/freebsd-include-mirror/taclib.h:char			*tac_get_av_value(struct tac_handle *, const char *);
/root/projects/freebsd-include-mirror/taclib.h:void			 tac_clear_avs(struct tac_handle *);
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_create_acct(struct tac_handle *, int, int, int, int);
/root/projects/freebsd-include-mirror/taclib.h:int			 tac_send_acct(struct tac_handle *);
/root/projects/freebsd-include-mirror/tcpd.h:struct host_info {
/root/projects/freebsd-include-mirror/tcpd.h:    struct sockaddr *sin;		/* socket address or 0 */
/root/projects/freebsd-include-mirror/tcpd.h:    struct sockaddr_in *sin;		/* socket address or 0 */
/root/projects/freebsd-include-mirror/tcpd.h:    struct t_unitdata *unit;		/* TLI transport address or 0 */
/root/projects/freebsd-include-mirror/tcpd.h:    struct request_info *request;	/* for shared information */
/root/projects/freebsd-include-mirror/tcpd.h:struct request_info {
/root/projects/freebsd-include-mirror/tcpd.h:    struct host_info client[1];		/* client endpoint info */
/root/projects/freebsd-include-mirror/tcpd.h:    struct host_info server[1];		/* server endpoint info */
/root/projects/freebsd-include-mirror/tcpd.h:    struct netconfig *config;		/* netdir handle */
/root/projects/freebsd-include-mirror/tcpd.h:  * Routines for controlled initialization and update of request structure
/root/projects/freebsd-include-mirror/tcpd.h:extern struct request_info *request_init(struct request_info *,...);
/root/projects/freebsd-include-mirror/tcpd.h:extern struct request_info *request_set(struct request_info *,...);
/root/projects/freebsd-include-mirror/tcpd.h:extern struct request_info *request_init();	/* initialize request */
/root/projects/freebsd-include-mirror/tcpd.h:extern struct request_info *request_set();	/* update request structure */
/root/projects/freebsd-include-mirror/tcpd.h:  * host_info structures serve as caches for the lookup results.
/root/projects/freebsd-include-mirror/tcpd.h:struct tcpd_context {
/root/projects/freebsd-include-mirror/tcpd.h:extern struct tcpd_context tcpd_context;
/root/projects/freebsd-include-mirror/tcpd.h:#ifdef INET_ADDR_BUG			/* inet_addr() returns struct */
/root/projects/freebsd-include-mirror/tcpd.h:extern struct hostent *fix_gethostbyname();
/root/projects/freebsd-include-mirror/term.h:**	term.h -- Definition of struct term
/root/projects/freebsd-include-mirror/term.h:#define TTY struct termios
/root/projects/freebsd-include-mirror/term.h:#define TTY struct termio
/root/projects/freebsd-include-mirror/term.h:#define TTY struct sgttyb
/root/projects/freebsd-include-mirror/term.h:typedef struct termtype {	/* in-core form of terminfo data */
/root/projects/freebsd-include-mirror/term.h:typedef struct term {		/* describe an actual terminal */
/root/projects/freebsd-include-mirror/termios.h: * Commands passed to tcsetattr() for setting the termios structure.
/root/projects/freebsd-include-mirror/termios.h:speed_t	cfgetispeed(const struct termios *);
/root/projects/freebsd-include-mirror/termios.h:speed_t	cfgetospeed(const struct termios *);
/root/projects/freebsd-include-mirror/termios.h:int	cfsetispeed(struct termios *, speed_t);
/root/projects/freebsd-include-mirror/termios.h:int	cfsetospeed(struct termios *, speed_t);
/root/projects/freebsd-include-mirror/termios.h:int	tcgetattr(int, struct termios *);
/root/projects/freebsd-include-mirror/termios.h:int	tcsetattr(int, int, const struct termios *);
/root/projects/freebsd-include-mirror/termios.h:void	cfmakeraw(struct termios *);
/root/projects/freebsd-include-mirror/termios.h:void	cfmakesane(struct termios *);
/root/projects/freebsd-include-mirror/termios.h:int	cfsetspeed(struct termios *, speed_t);
/root/projects/freebsd-include-mirror/thread_db.h:struct ps_prochandle;
/root/projects/freebsd-include-mirror/thread_db.h:typedef struct td_thragent td_thragent_t;
/root/projects/freebsd-include-mirror/thread_db.h:typedef struct {
/root/projects/freebsd-include-mirror/thread_db.h:typedef struct {
/root/projects/freebsd-include-mirror/thread_db.h:typedef struct {
/root/projects/freebsd-include-mirror/thread_db.h:typedef struct {
/root/projects/freebsd-include-mirror/thread_db.h:td_err_e td_ta_new(struct ps_prochandle *, td_thragent_t **);
/root/projects/freebsd-include-mirror/time.h:struct tm {
/root/projects/freebsd-include-mirror/time.h:char *asctime(const struct tm *);
/root/projects/freebsd-include-mirror/time.h:struct tm *gmtime(const time_t *);
/root/projects/freebsd-include-mirror/time.h:struct tm *localtime(const time_t *);
/root/projects/freebsd-include-mirror/time.h:time_t mktime(struct tm *);
/root/projects/freebsd-include-mirror/time.h:    const struct tm * __restrict);
/root/projects/freebsd-include-mirror/time.h:struct sigevent;
/root/projects/freebsd-include-mirror/time.h:int timer_create(clockid_t, struct sigevent *__restrict, timer_t *__restrict);
/root/projects/freebsd-include-mirror/time.h:int timer_gettime(timer_t, struct itimerspec *);
/root/projects/freebsd-include-mirror/time.h:int timer_settime(timer_t, int, const struct itimerspec *__restrict,
/root/projects/freebsd-include-mirror/time.h:	struct itimerspec *__restrict);
/root/projects/freebsd-include-mirror/time.h:int clock_getres(clockid_t, struct timespec *);
/root/projects/freebsd-include-mirror/time.h:int clock_gettime(clockid_t, struct timespec *);
/root/projects/freebsd-include-mirror/time.h:int clock_settime(clockid_t, const struct timespec *);
/root/projects/freebsd-include-mirror/time.h:int nanosleep(const struct timespec *, struct timespec *);
/root/projects/freebsd-include-mirror/time.h:char *asctime_r(const struct tm *, char *);
/root/projects/freebsd-include-mirror/time.h:struct tm *gmtime_r(const time_t *, struct tm *);
/root/projects/freebsd-include-mirror/time.h:struct tm *localtime_r(const time_t *, struct tm *);
/root/projects/freebsd-include-mirror/time.h:    struct tm * __restrict);
/root/projects/freebsd-include-mirror/time.h:time_t timelocal(struct tm * const);
/root/projects/freebsd-include-mirror/time.h:time_t timegm(struct tm * const);
/root/projects/freebsd-include-mirror/ttyent.h:struct ttyent {
/root/projects/freebsd-include-mirror/ttyent.h:struct ttyent *getttyent(void);
/root/projects/freebsd-include-mirror/ttyent.h:struct ttyent *getttynam(const char *);
/root/projects/freebsd-include-mirror/ucontext.h:typedef struct __ucontext {
/root/projects/freebsd-include-mirror/ucontext.h:	 * keep them the first two fields in the structure.
/root/projects/freebsd-include-mirror/ucontext.h:	 * This way we can have a union with struct
/root/projects/freebsd-include-mirror/ucontext.h:	struct __ucontext *uc_link;
/root/projects/freebsd-include-mirror/ucontext.h:struct ucontext4 {
/root/projects/freebsd-include-mirror/ucontext.h:	struct mcontext4 uc_mcontext;
/root/projects/freebsd-include-mirror/ucontext.h:	struct ucontext4 *uc_link;
/root/projects/freebsd-include-mirror/ucontext.h:struct thread;
/root/projects/freebsd-include-mirror/ucontext.h:int	get_mcontext(struct thread *, mcontext_t *, int);
/root/projects/freebsd-include-mirror/ucontext.h:int	set_mcontext(struct thread *, const mcontext_t *);
/root/projects/freebsd-include-mirror/ugidfw.h:int	bsde_rule_to_string(struct mac_bsdextended_rule *rule, char *buf,
/root/projects/freebsd-include-mirror/ugidfw.h:	    struct mac_bsdextended_rule *rule, size_t buflen, char *errstr);
/root/projects/freebsd-include-mirror/ugidfw.h:	    struct mac_bsdextended_rule *rule, size_t buflen, char *errstr);
/root/projects/freebsd-include-mirror/ugidfw.h:int	bsde_get_rule(int rulenum, struct mac_bsdextended_rule *rule,
/root/projects/freebsd-include-mirror/ugidfw.h:int	bsde_set_rule(int rulenum, struct mac_bsdextended_rule *rule,
/root/projects/freebsd-include-mirror/ugidfw.h:int	bsde_add_rule(int *rulename, struct mac_bsdextended_rule *rule,
/root/projects/freebsd-include-mirror/unistd.h:struct timeval;				/* select(2) */
/root/projects/freebsd-include-mirror/unistd.h:int	 select(int, fd_set *, fd_set *, fd_set *, struct timeval *);
/root/projects/freebsd-include-mirror/usb.h:struct usb_descriptor_header {
/root/projects/freebsd-include-mirror/usb.h:struct usb_string_descriptor {
/root/projects/freebsd-include-mirror/usb.h:struct usb_hid_descriptor {
/root/projects/freebsd-include-mirror/usb.h:struct usb_endpoint_descriptor {
/root/projects/freebsd-include-mirror/usb.h:struct usb_interface_descriptor {
/root/projects/freebsd-include-mirror/usb.h:	struct usb_endpoint_descriptor *endpoint;
/root/projects/freebsd-include-mirror/usb.h:struct usb_interface {
/root/projects/freebsd-include-mirror/usb.h:	struct usb_interface_descriptor *altsetting;
/root/projects/freebsd-include-mirror/usb.h:struct usb_config_descriptor {
/root/projects/freebsd-include-mirror/usb.h:	struct usb_interface *interface;
/root/projects/freebsd-include-mirror/usb.h:struct usb_device_descriptor {
/root/projects/freebsd-include-mirror/usb.h:struct usb_ctrl_setup {
/root/projects/freebsd-include-mirror/usb.h:struct usb_device;
/root/projects/freebsd-include-mirror/usb.h:struct usb_bus;
/root/projects/freebsd-include-mirror/usb.h: * we must only add entries to the end of this structure. NEVER delete or
/root/projects/freebsd-include-mirror/usb.h:struct usb_device {
/root/projects/freebsd-include-mirror/usb.h:	struct usb_device *next;
/root/projects/freebsd-include-mirror/usb.h:	struct usb_device *prev;
/root/projects/freebsd-include-mirror/usb.h:	struct usb_bus *bus;
/root/projects/freebsd-include-mirror/usb.h:	struct usb_device_descriptor descriptor;
/root/projects/freebsd-include-mirror/usb.h:	struct usb_config_descriptor *config;
/root/projects/freebsd-include-mirror/usb.h:	struct usb_device **children;
/root/projects/freebsd-include-mirror/usb.h:struct usb_bus {
/root/projects/freebsd-include-mirror/usb.h:	struct usb_bus *next;
/root/projects/freebsd-include-mirror/usb.h:	struct usb_bus *prev;
/root/projects/freebsd-include-mirror/usb.h:	struct usb_device *devices;
/root/projects/freebsd-include-mirror/usb.h:	struct usb_device *root_dev;
/root/projects/freebsd-include-mirror/usb.h:struct usb_dev_handle;
/root/projects/freebsd-include-mirror/usb.h:typedef struct usb_dev_handle usb_dev_handle;
/root/projects/freebsd-include-mirror/usb.h:extern struct usb_bus *usb_busses;
/root/projects/freebsd-include-mirror/usb.h:usb_dev_handle *usb_open(struct usb_device *dev);
/root/projects/freebsd-include-mirror/usb.h:int	usb_parse_configuration(struct usb_config_descriptor *config, uint8_t *buffer);
/root/projects/freebsd-include-mirror/usb.h:void	usb_destroy_configuration(struct usb_device *dev);
/root/projects/freebsd-include-mirror/usb.h:struct usb_device *usb_device(usb_dev_handle * dev);
/root/projects/freebsd-include-mirror/usb.h:struct usb_bus *usb_get_busses(void);
/root/projects/freebsd-include-mirror/usbhid.h:typedef struct report_desc *report_desc_t;
/root/projects/freebsd-include-mirror/usbhid.h:typedef struct hid_data *hid_data_t;
/root/projects/freebsd-include-mirror/usbhid.h:typedef struct hid_item {
/root/projects/freebsd-include-mirror/usbhid.h:	struct hid_item *next;
/root/projects/freebsd-include-mirror/utime.h:struct utimbuf {
/root/projects/freebsd-include-mirror/utime.h:int utime(const char *, const struct utimbuf *);
/root/projects/freebsd-include-mirror/utmpx.h:struct utmpx {
/root/projects/freebsd-include-mirror/utmpx.h:	struct timeval	ut_tv;		/* Time entry was made. */
/root/projects/freebsd-include-mirror/utmpx.h:struct utmpx *getutxent(void);
/root/projects/freebsd-include-mirror/utmpx.h:struct utmpx *getutxid(const struct utmpx *);
/root/projects/freebsd-include-mirror/utmpx.h:struct utmpx *getutxline(const struct utmpx *);
/root/projects/freebsd-include-mirror/utmpx.h:struct utmpx *pututxline(const struct utmpx *);
/root/projects/freebsd-include-mirror/utmpx.h:struct utmpx *getutxuser(const char *);
/root/projects/freebsd-include-mirror/vgl.h:typedef struct {
/root/projects/freebsd-include-mirror/vgl.h:typedef struct VGLText {
/root/projects/freebsd-include-mirror/vgl.h:typedef struct VGLObject {
/root/projects/freebsd-include-mirror/wchar.h:struct __sFILE;
/root/projects/freebsd-include-mirror/wchar.h:struct tm;
/root/projects/freebsd-include-mirror/wchar.h:wint_t	fgetwc(struct __sFILE *);
/root/projects/freebsd-include-mirror/wchar.h:	fgetws(wchar_t * __restrict, int, struct __sFILE * __restrict);
/root/projects/freebsd-include-mirror/wchar.h:wint_t	fputwc(wchar_t, struct __sFILE *);
/root/projects/freebsd-include-mirror/wchar.h:int	fputws(const wchar_t * __restrict, struct __sFILE * __restrict);
/root/projects/freebsd-include-mirror/wchar.h:int	fwide(struct __sFILE *, int);
/root/projects/freebsd-include-mirror/wchar.h:int	fwprintf(struct __sFILE * __restrict, const wchar_t * __restrict, ...);
/root/projects/freebsd-include-mirror/wchar.h:int	fwscanf(struct __sFILE * __restrict, const wchar_t * __restrict, ...);
/root/projects/freebsd-include-mirror/wchar.h:wint_t	getwc(struct __sFILE *);
/root/projects/freebsd-include-mirror/wchar.h:wint_t	putwc(wchar_t, struct __sFILE *);
/root/projects/freebsd-include-mirror/wchar.h:wint_t	ungetwc(wint_t, struct __sFILE *);
/root/projects/freebsd-include-mirror/wchar.h:int	vfwprintf(struct __sFILE * __restrict, const wchar_t * __restrict,
/root/projects/freebsd-include-mirror/wchar.h:	    const struct tm * __restrict);
/root/projects/freebsd-include-mirror/wchar.h:extern struct __sFILE *__stdinp;
/root/projects/freebsd-include-mirror/wchar.h:extern struct __sFILE *__stdoutp;
/root/projects/freebsd-include-mirror/wchar.h:extern struct __sFILE *__stderrp;
/root/projects/freebsd-include-mirror/wchar.h:int	vfwscanf(struct __sFILE * __restrict, const wchar_t * __restrict,
/root/projects/freebsd-include-mirror/wchar.h:wchar_t	*fgetwln(struct __sFILE * __restrict, size_t * __restrict);
/root/projects/freebsd-include-mirror/wordexp.h:typedef struct {
/root/projects/freebsd-include-mirror/ypclnt.h:typedef struct ypclnt ypclnt_t;
/root/projects/freebsd-include-mirror/ypclnt.h:struct ypclnt {
/root/projects/freebsd-include-mirror/ypclnt.h:struct passwd;
/root/projects/freebsd-include-mirror/ypclnt.h:int		 ypclnt_passwd(ypclnt_t *, const struct passwd *, const char *);
/root/projects/freebsd-include-mirror/zconf.h:/* all zlib structs in zlib.h and zconf.h */
/root/projects/freebsd-include-mirror/zlib.h:struct internal_state;
/root/projects/freebsd-include-mirror/zlib.h:typedef struct z_stream_s {
/root/projects/freebsd-include-mirror/zlib.h:    struct internal_state FAR *state; /* not visible by applications */
/root/projects/freebsd-include-mirror/zlib.h:typedef struct gz_header_s {
/root/projects/freebsd-include-mirror/zlib.h:     All dynamically allocated data structures for this stream are freed.
/root/projects/freebsd-include-mirror/zlib.h:   compression method from the zlib header and allocates all data structures
/root/projects/freebsd-include-mirror/zlib.h:   invalid, such as a null pointer to the structure.  msg is set to null if
/root/projects/freebsd-include-mirror/zlib.h:  value), Z_STREAM_ERROR if the stream structure was inconsistent (for example
/root/projects/freebsd-include-mirror/zlib.h:     All dynamically allocated data structures for this stream are freed.
/root/projects/freebsd-include-mirror/zlib.h:     Depending on the size of the compression data structures selected by
/root/projects/freebsd-include-mirror/zlib.h:   in the provided gz_header structure are written to the gzip header (xflag is
/root/projects/freebsd-include-mirror/zlib.h:   invalid, such as a null pointer to the structure.  msg is set to null if
/root/projects/freebsd-include-mirror/zlib.h:   found, or Z_STREAM_ERROR if the stream structure was inconsistent.  In the
/root/projects/freebsd-include-mirror/zlib.h:   provided gz_header structure.  inflateGetHeader() may be called after
/root/projects/freebsd-include-mirror/zlib.h:   structure to duplicate the header.  However if those fields are set to
/root/projects/freebsd-include-mirror/zlib.h:   cannot call gzerror with file, since its structures have been deallocated.
/root/projects/freebsd-include-mirror/zlib.h:    struct internal_state {int dummy;};
